
TinyHouseSmartSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800659c  0800659c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800659c  0800659c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800659c  0800659c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080065a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000006cc  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000730  20000730  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001177d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023db  00000000  00000000  00031854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00033c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c96  00000000  00000000  00034c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c119  00000000  00000000  000358ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014940  00000000  00000000  000519e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6863  00000000  00000000  00066327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a30  00000000  00000000  0010cb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001115bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005760 	.word	0x08005760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005760 	.word	0x08005760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <IdleHandler>:



/* Prototype Event Handlers */
eSystemState IdleHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	//Delay for 1 seconds
	HAL_Delay(2000);
 8000ab0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab4:	f001 f83a 	bl	8001b2c <HAL_Delay>
	//Start the temperature read state
	HAL_TIM_Base_Start(&htim1);
 8000ab8:	480e      	ldr	r0, [pc, #56]	; (8000af4 <IdleHandler+0x48>)
 8000aba:	f003 fb75 	bl	80041a8 <HAL_TIM_Base_Start>
	ssd1306_Init();
 8000abe:	f000 fc71 	bl	80013a4 <ssd1306_Init>


	ssd1306_SetCursor(4, 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f000 fe19 	bl	80016fc <ssd1306_SetCursor>
	ssd1306_WriteString("Melon ", Font_11x18, White);
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <IdleHandler+0x4c>)
 8000acc:	2301      	movs	r3, #1
 8000ace:	ca06      	ldmia	r2, {r1, r2}
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <IdleHandler+0x50>)
 8000ad2:	f000 fded 	bl	80016b0 <ssd1306_WriteString>

	ssd1306_SetCursor(1,25);
 8000ad6:	2119      	movs	r1, #25
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 fe0f 	bl	80016fc <ssd1306_SetCursor>
	ssd1306_WriteString("Electronics", Font_11x18, White);
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <IdleHandler+0x4c>)
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	ca06      	ldmia	r2, {r1, r2}
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <IdleHandler+0x54>)
 8000ae6:	f000 fde3 	bl	80016b0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000aea:	f000 fcdd 	bl	80014a8 <ssd1306_UpdateScreen>

	return TandH_Read_State; // Goes to Temperature Read State
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000d4 	.word	0x200000d4
 8000af8:	20000000 	.word	0x20000000
 8000afc:	08005778 	.word	0x08005778
 8000b00:	08005780 	.word	0x08005780

08000b04 <TandHReaderHandler>:

eSystemState TandHReaderHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	ed2d 8b02 	vpush	{d8}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	//Reads the Humidity data
	//Stores the data

	if(DHT11_Start())
 8000b0e:	f000 f947 	bl	8000da0 <DHT11_Start>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80c8 	beq.w	8000caa <TandHReaderHandler+0x1a6>
	{
		RHI = DHT11_Read(); // Relative humidity integral
 8000b1a:	f000 f9b7 	bl	8000e8c <DHT11_Read>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <TandHReaderHandler+0x1b4>)
 8000b24:	701a      	strb	r2, [r3, #0]
	    RHD = DHT11_Read(); // Relative humidity decimal
 8000b26:	f000 f9b1 	bl	8000e8c <DHT11_Read>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b63      	ldr	r3, [pc, #396]	; (8000cbc <TandHReaderHandler+0x1b8>)
 8000b30:	701a      	strb	r2, [r3, #0]
	    TCI = DHT11_Read(); // Celsius integral
 8000b32:	f000 f9ab 	bl	8000e8c <DHT11_Read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <TandHReaderHandler+0x1bc>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	    TCD = DHT11_Read(); // Celsius decimal
 8000b3e:	f000 f9a5 	bl	8000e8c <DHT11_Read>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <TandHReaderHandler+0x1c0>)
 8000b48:	701a      	strb	r2, [r3, #0]
	    SUM = DHT11_Read(); // Check sum
 8000b4a:	f000 f99f 	bl	8000e8c <DHT11_Read>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <TandHReaderHandler+0x1c4>)
 8000b54:	701a      	strb	r2, [r3, #0]
	    if (RHI + RHD + TCI + TCD == SUM)
 8000b56:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <TandHReaderHandler+0x1b4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <TandHReaderHandler+0x1b8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a57      	ldr	r2, [pc, #348]	; (8000cc0 <TandHReaderHandler+0x1bc>)
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a56      	ldr	r2, [pc, #344]	; (8000cc4 <TandHReaderHandler+0x1c0>)
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a56      	ldr	r2, [pc, #344]	; (8000cc8 <TandHReaderHandler+0x1c4>)
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f040 8099 	bne.w	8000caa <TandHReaderHandler+0x1a6>
	    {
	    	// Can use RHI and TCI for any purposes if whole number only needed
	    	tCelsius = (float)TCI + (float)(TCD/10.0);
 8000b78:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <TandHReaderHandler+0x1bc>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000b84:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <TandHReaderHandler+0x1c0>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fcc3 	bl	8000514 <__aeabi_i2d>
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b4e      	ldr	r3, [pc, #312]	; (8000ccc <TandHReaderHandler+0x1c8>)
 8000b94:	f7ff fe52 	bl	800083c <__aeabi_ddiv>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff ff34 	bl	8000a0c <__aeabi_d2f>
 8000ba4:	ee07 0a90 	vmov	s15, r0
 8000ba8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <TandHReaderHandler+0x1cc>)
 8000bae:	edc3 7a00 	vstr	s15, [r3]
	    	tFahrenheit = tCelsius * 9/5 + 32;
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <TandHReaderHandler+0x1cc>)
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bc0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000cd4 <TandHReaderHandler+0x1d0>
 8000bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <TandHReaderHandler+0x1d4>)
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
	    	RH = (float)RHI + (float)(RHD/10.0);
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <TandHReaderHandler+0x1b4>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <TandHReaderHandler+0x1b8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc94 	bl	8000514 <__aeabi_i2d>
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <TandHReaderHandler+0x1c8>)
 8000bf2:	f7ff fe23 	bl	800083c <__aeabi_ddiv>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f7ff ff05 	bl	8000a0c <__aeabi_d2f>
 8000c02:	ee07 0a90 	vmov	s15, r0
 8000c06:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <TandHReaderHandler+0x1d8>)
 8000c0c:	edc3 7a00 	vstr	s15, [r3]

	    	// Can use tCelsius, tFahrenheit and RH for any purposes
	    	TFI = tFahrenheit;  // Fahrenheit integral
 8000c10:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <TandHReaderHandler+0x1d4>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c1e:	793b      	ldrb	r3, [r7, #4]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <TandHReaderHandler+0x1dc>)
 8000c24:	701a      	strb	r2, [r3, #0]
	    	TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <TandHReaderHandler+0x1d4>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <TandHReaderHandler+0x1dc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c52:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c56:	793b      	ldrb	r3, [r7, #4]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <TandHReaderHandler+0x1e0>)
 8000c5c:	701a      	strb	r2, [r3, #0]

	    	sprintf(strCopy,"Tmp: %d.%d F   ", TFI, TFD);
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <TandHReaderHandler+0x1dc>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <TandHReaderHandler+0x1e0>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <TandHReaderHandler+0x1e4>)
 8000c6a:	4820      	ldr	r0, [pc, #128]	; (8000cec <TandHReaderHandler+0x1e8>)
 8000c6c:	f004 f8d4 	bl	8004e18 <siprintf>
	    	ssd1306_SetCursor(1, 1);
 8000c70:	2101      	movs	r1, #1
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fd42 	bl	80016fc <ssd1306_SetCursor>
	    	ssd1306_WriteString (strCopy, Font_11x18, White);
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <TandHReaderHandler+0x1ec>)
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	ca06      	ldmia	r2, {r1, r2}
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <TandHReaderHandler+0x1e8>)
 8000c80:	f000 fd16 	bl	80016b0 <ssd1306_WriteString>

	    	sprintf(strCopy,"Hmd: %d.%d %%  ", RHI, RHD);
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <TandHReaderHandler+0x1b4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <TandHReaderHandler+0x1b8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4919      	ldr	r1, [pc, #100]	; (8000cf4 <TandHReaderHandler+0x1f0>)
 8000c90:	4816      	ldr	r0, [pc, #88]	; (8000cec <TandHReaderHandler+0x1e8>)
 8000c92:	f004 f8c1 	bl	8004e18 <siprintf>
	    	ssd1306_SetCursor(1, 25);
 8000c96:	2119      	movs	r1, #25
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fd2f 	bl	80016fc <ssd1306_SetCursor>
	    	ssd1306_WriteString (strCopy, Font_11x18, White);
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <TandHReaderHandler+0x1ec>)
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	ca06      	ldmia	r2, {r1, r2}
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <TandHReaderHandler+0x1e8>)
 8000ca6:	f000 fd03 	bl	80016b0 <ssd1306_WriteString>

	      }
	  }
	return AirQ_Read_State; //Goes to AirQ Read State
 8000caa:	2302      	movs	r3, #2
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	ecbd 8b02 	vpop	{d8}
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001a8 	.word	0x200001a8
 8000cbc:	200001a9 	.word	0x200001a9
 8000cc0:	200001aa 	.word	0x200001aa
 8000cc4:	200001ab 	.word	0x200001ab
 8000cc8:	200001ac 	.word	0x200001ac
 8000ccc:	40240000 	.word	0x40240000
 8000cd0:	200001b8 	.word	0x200001b8
 8000cd4:	42000000 	.word	0x42000000
 8000cd8:	200001bc 	.word	0x200001bc
 8000cdc:	200001c0 	.word	0x200001c0
 8000ce0:	200001c4 	.word	0x200001c4
 8000ce4:	200001c5 	.word	0x200001c5
 8000ce8:	0800578c 	.word	0x0800578c
 8000cec:	200001c8 	.word	0x200001c8
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	0800579c 	.word	0x0800579c

08000cf8 <AirQReaderHandler>:

eSystemState AirQReaderHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	//Reads the AirQ data
	//Stores the data

	  ssd1306_SetCursor(1, 46);
 8000cfc:	212e      	movs	r1, #46	; 0x2e
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 fcfc 	bl	80016fc <ssd1306_SetCursor>
	  //sprintf(strCopy,"AIR BAD :(");

	  switch (getAirQuality()){
 8000d04:	f000 f93e 	bl	8000f84 <getAirQuality>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <AirQReaderHandler+0x24>
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d109      	bne.n	8000d26 <AirQReaderHandler+0x2e>
	  case 1:
		  sprintf(strCopy,"Air: Good");
 8000d12:	490b      	ldr	r1, [pc, #44]	; (8000d40 <AirQReaderHandler+0x48>)
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <AirQReaderHandler+0x4c>)
 8000d16:	f004 f87f 	bl	8004e18 <siprintf>
		  break;
 8000d1a:	e008      	b.n	8000d2e <AirQReaderHandler+0x36>
	  case 0:
		  sprintf(strCopy,"Air: Bad    ");
 8000d1c:	490a      	ldr	r1, [pc, #40]	; (8000d48 <AirQReaderHandler+0x50>)
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <AirQReaderHandler+0x4c>)
 8000d20:	f004 f87a 	bl	8004e18 <siprintf>
		  break;
 8000d24:	e003      	b.n	8000d2e <AirQReaderHandler+0x36>
	  default:
		  sprintf(strCopy,"Air: N/a");
 8000d26:	4909      	ldr	r1, [pc, #36]	; (8000d4c <AirQReaderHandler+0x54>)
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <AirQReaderHandler+0x4c>)
 8000d2a:	f004 f875 	bl	8004e18 <siprintf>
	  }

	  ssd1306_WriteString (strCopy, Font_11x18, White);
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <AirQReaderHandler+0x58>)
 8000d30:	2301      	movs	r3, #1
 8000d32:	ca06      	ldmia	r2, {r1, r2}
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <AirQReaderHandler+0x4c>)
 8000d36:	f000 fcbb 	bl	80016b0 <ssd1306_WriteString>

	return Display_Results_State; //Goes to Display Result State
 8000d3a:	2303      	movs	r3, #3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	080057ac 	.word	0x080057ac
 8000d44:	200001c8 	.word	0x200001c8
 8000d48:	080057b8 	.word	0x080057b8
 8000d4c:	080057c8 	.word	0x080057c8
 8000d50:	20000000 	.word	0x20000000

08000d54 <DisplayResultsHandler>:

eSystemState DisplayResultsHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	//Gets the Stored data
	//Displays all 3 data

    ssd1306_UpdateScreen();
 8000d58:	f000 fba6 	bl	80014a8 <ssd1306_UpdateScreen>
    HAL_Delay(2000);
 8000d5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d60:	f000 fee4 	bl	8001b2c <HAL_Delay>

	return TandH_Read_State;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <microDelay>:


/**********************************8888888    Functions    *************************************88*/


void microDelay (uint16_t delay){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <microDelay+0x30>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d7e:	bf00      	nop
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <microDelay+0x30>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3f9      	bcc.n	8000d80 <microDelay+0x14>
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000d4 	.word	0x200000d4

08000da0 <DHT11_Start>:

//DHT 11 Functions
uint8_t DHT11_Start(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000db8:	2301      	movs	r3, #1
 8000dba:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 ffb6 	bl	8001d40 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f001 f93a 	bl	8002054 <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 20ms
 8000de0:	2014      	movs	r0, #20
 8000de2:	f000 fea3 	bl	8001b2c <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000de6:	2201      	movs	r2, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f001 f931 	bl	8002054 <HAL_GPIO_WritePin>
	microDelay (30);   // wait for 30us
 8000df2:	201e      	movs	r0, #30
 8000df4:	f7ff ffba 	bl	8000d6c <microDelay>

	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 ff9a 	bl	8001d40 <HAL_GPIO_Init>
	microDelay (40);
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f7ff ffad 	bl	8000d6c <microDelay>

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) {
 8000e12:	2101      	movs	r1, #1
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 f904 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <DHT11_Start+0x9c>
		microDelay (80);
 8000e22:	2050      	movs	r0, #80	; 0x50
 8000e24:	f7ff ffa2 	bl	8000d6c <microDelay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) {
 8000e28:	2101      	movs	r1, #1
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f001 f8f9 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <DHT11_Start+0x9c>
			Response = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	pMillis = HAL_GetTick();
 8000e3c:	f000 fe6a 	bl	8001b14 <HAL_GetTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <DHT11_Start+0xe4>)
 8000e44:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8000e46:	f000 fe65 	bl	8001b14 <HAL_GetTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <DHT11_Start+0xe8>)
 8000e4e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000e50:	e004      	b.n	8000e5c <DHT11_Start+0xbc>
		cMillis = HAL_GetTick();
 8000e52:	f000 fe5f 	bl	8001b14 <HAL_GetTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <DHT11_Start+0xe8>)
 8000e5a:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f001 f8df 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <DHT11_Start+0xda>
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <DHT11_Start+0xe4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1c9a      	adds	r2, r3, #2
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <DHT11_Start+0xe8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d8eb      	bhi.n	8000e52 <DHT11_Start+0xb2>
	}
	return Response;
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001b0 	.word	0x200001b0
 8000e88:	200001b4 	.word	0x200001b4

08000e8c <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;;
 8000e92:	2300      	movs	r3, #0
 8000e94:	71bb      	strb	r3, [r7, #6]

    for (a = 0; a < 8; a++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e066      	b.n	8000f6a <DHT11_Read+0xde>
        pMillis = HAL_GetTick();
 8000e9c:	f000 fe3a 	bl	8001b14 <HAL_GetTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a36      	ldr	r2, [pc, #216]	; (8000f7c <DHT11_Read+0xf0>)
 8000ea4:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000ea6:	f000 fe35 	bl	8001b14 <HAL_GetTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a34      	ldr	r2, [pc, #208]	; (8000f80 <DHT11_Read+0xf4>)
 8000eae:	6013      	str	r3, [r2, #0]

        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000eb0:	e004      	b.n	8000ebc <DHT11_Read+0x30>
            // wait for the pin to go high
            cMillis = HAL_GetTick();
 8000eb2:	f000 fe2f 	bl	8001b14 <HAL_GetTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <DHT11_Read+0xf4>)
 8000eba:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f001 f8af 	bl	8002024 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <DHT11_Read+0x4e>
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <DHT11_Read+0xf0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	1c9a      	adds	r2, r3, #2
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <DHT11_Read+0xf4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d8eb      	bhi.n	8000eb2 <DHT11_Read+0x26>
        }

        microDelay(40); // wait for 40 us
 8000eda:	2028      	movs	r0, #40	; 0x28
 8000edc:	f7ff ff46 	bl	8000d6c <microDelay>

        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f001 f89d 	bl	8002024 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10e      	bne.n	8000f0e <DHT11_Read+0x82>
            // if the pin is low
            b &= ~(1 << (7 - a));
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f06:	4013      	ands	r3, r2
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	e00b      	b.n	8000f26 <DHT11_Read+0x9a>
        } else {
            b |= (1 << (7 - a));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f1c3 0307 	rsb	r3, r3, #7
 8000f14:	2201      	movs	r2, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	71bb      	strb	r3, [r7, #6]
        }

        pMillis = HAL_GetTick();
 8000f26:	f000 fdf5 	bl	8001b14 <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <DHT11_Read+0xf0>)
 8000f2e:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000f30:	f000 fdf0 	bl	8001b14 <HAL_GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <DHT11_Read+0xf4>)
 8000f38:	6013      	str	r3, [r2, #0]

        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f3a:	e004      	b.n	8000f46 <DHT11_Read+0xba>
            // wait for the pin to go low
            cMillis = HAL_GetTick();
 8000f3c:	f000 fdea 	bl	8001b14 <HAL_GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <DHT11_Read+0xf4>)
 8000f44:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f46:	2101      	movs	r1, #1
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 f86a 	bl	8002024 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <DHT11_Read+0xd8>
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <DHT11_Read+0xf0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1c9a      	adds	r2, r3, #2
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <DHT11_Read+0xf4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8eb      	bhi.n	8000f3c <DHT11_Read+0xb0>
    for (a = 0; a < 8; a++) {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	3301      	adds	r3, #1
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d995      	bls.n	8000e9c <DHT11_Read+0x10>
        }
    }

    return b;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b0 	.word	0x200001b0
 8000f80:	200001b4 	.word	0x200001b4

08000f84 <getAirQuality>:

uint8_t getAirQuality(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
	uint8_t airGood = -1;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = MQ135_PIN;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(MQ135_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f000 fec4 	bl	8001d40 <HAL_GPIO_Init>
	airGood = HAL_GPIO_ReadPin (MQ135_PORT, MQ135_PIN);
 8000fb8:	2102      	movs	r1, #2
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 f831 	bl	8002024 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75fb      	strb	r3, [r7, #23]
	return airGood;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 fd43 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f82f 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f94b 	bl	8001278 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f919 	bl	8001218 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe6:	f000 f885 	bl	80010f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fea:	f000 f8c1 	bl	8001170 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Declaring the first state - Idle State
  eSystemState eNextState = Idle_State;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(eNextState)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d8fc      	bhi.n	8000ff2 <main+0x22>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <main+0x30>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	0800101b 	.word	0x0800101b
 8001008:	08001025 	.word	0x08001025
 800100c:	0800102f 	.word	0x0800102f
	{
		case Idle_State:
			eNextState = IdleHandler();
 8001010:	f7ff fd4c 	bl	8000aac <IdleHandler>
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
			break;
 8001018:	e00f      	b.n	800103a <main+0x6a>
		case TandH_Read_State:
			eNextState = TandHReaderHandler();
 800101a:	f7ff fd73 	bl	8000b04 <TandHReaderHandler>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
			break;
 8001022:	e00a      	b.n	800103a <main+0x6a>
		case AirQ_Read_State:
			eNextState = AirQReaderHandler();
 8001024:	f7ff fe68 	bl	8000cf8 <AirQReaderHandler>
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
			break;
 800102c:	e005      	b.n	800103a <main+0x6a>
		case Display_Results_State:
			eNextState = DisplayResultsHandler();
 800102e:	f7ff fe91 	bl	8000d54 <DisplayResultsHandler>
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
			break;
 8001036:	bf00      	nop
 8001038:	e7db      	b.n	8000ff2 <main+0x22>
	switch(eNextState)
 800103a:	e7da      	b.n	8000ff2 <main+0x22>

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 ff1e 	bl	8004e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8001084:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8001088:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fc98 	bl	80029c4 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800109a:	f000 f945 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	230f      	movs	r3, #15
 80010a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2302      	movs	r3, #2
 80010a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fcc0 	bl	8003a40 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010c6:	f000 f92f 	bl	8001328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80010ca:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80010ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fee6 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010e6:	f000 f91f 	bl	8001328 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3758      	adds	r7, #88	; 0x58
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_I2C1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_I2C1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_I2C1_Init+0x74>)
 8001100:	f240 220b 	movw	r2, #523	; 0x20b
 8001104:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_I2C1_Init+0x74>)
 800110e:	2201      	movs	r2, #1
 8001110:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_I2C1_Init+0x74>)
 8001132:	f000 ffa7 	bl	8002084 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f8f4 	bl	8001328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_I2C1_Init+0x74>)
 8001144:	f001 fba6 	bl	8002894 <HAL_I2CEx_ConfigAnalogFilter>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800114e:	f000 f8eb 	bl	8001328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_I2C1_Init+0x74>)
 8001156:	f001 fbe8 	bl	800292a <HAL_I2CEx_ConfigDigitalFilter>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001160:	f000 f8e2 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000080 	.word	0x20000080
 800116c:	40005400 	.word	0x40005400

08001170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <MX_TIM1_Init+0xa0>)
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <MX_TIM1_Init+0xa4>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 51;
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_TIM1_Init+0xa0>)
 8001196:	2233      	movs	r2, #51	; 0x33
 8001198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_TIM1_Init+0xa0>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4815      	ldr	r0, [pc, #84]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011bc:	f002 ff9c 	bl	80040f8 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011c6:	f000 f8af 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011d8:	f003 f83a 	bl	8004250 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011e2:	f000 f8a1 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM1_Init+0xa0>)
 80011f8:	f003 fa06 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001202:	f000 f891 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000d4 	.word	0x200000d4
 8001214:	40012c00 	.word	0x40012c00

08001218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_USART2_UART_Init+0x5c>)
 8001220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001224:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800125c:	f003 fa42 	bl	80046e4 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001266:	f000 f85f 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000120 	.word	0x20000120
 8001274:	40004400 	.word	0x40004400

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_GPIO_Init+0xac>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a24      	ldr	r2, [pc, #144]	; (8001324 <MX_GPIO_Init+0xac>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001298:	6153      	str	r3, [r2, #20]
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_GPIO_Init+0xac>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_GPIO_Init+0xac>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <MX_GPIO_Init+0xac>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_GPIO_Init+0xac>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_GPIO_Init+0xac>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <MX_GPIO_Init+0xac>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_GPIO_Init+0xac>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f000 feb9 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e2:	2301      	movs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f000 fd20 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001300:	2302      	movs	r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f000 fd13 	bl	8001d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>

08001332 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af04      	add	r7, sp, #16
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	2200      	movs	r2, #0
 800135c:	2178      	movs	r1, #120	; 0x78
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <ssd1306_WriteCommand+0x2c>)
 8001360:	f000 ff20 	bl	80021a4 <HAL_I2C_Mem_Write>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000080 	.word	0x20000080

08001370 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	f04f 32ff 	mov.w	r2, #4294967295
 8001382:	9202      	str	r2, [sp, #8]
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	2178      	movs	r1, #120	; 0x78
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <ssd1306_WriteData+0x30>)
 8001392:	f000 ff07 	bl	80021a4 <HAL_I2C_Mem_Write>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000080 	.word	0x20000080

080013a4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80013a8:	f7ff ffc3 	bl	8001332 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	; 0x64
 80013ae:	f000 fbbd 	bl	8001b2c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f9ce 	bl	8001754 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80013b8:	2020      	movs	r0, #32
 80013ba:	f7ff ffc1 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ffbe 	bl	8001340 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013c4:	20b0      	movs	r0, #176	; 0xb0
 80013c6:	f7ff ffbb 	bl	8001340 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80013ca:	20c8      	movs	r0, #200	; 0xc8
 80013cc:	f7ff ffb8 	bl	8001340 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffb5 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80013d6:	2010      	movs	r0, #16
 80013d8:	f7ff ffb2 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80013dc:	2040      	movs	r0, #64	; 0x40
 80013de:	f7ff ffaf 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80013e2:	20ff      	movs	r0, #255	; 0xff
 80013e4:	f000 f9a2 	bl	800172c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80013e8:	20a1      	movs	r0, #161	; 0xa1
 80013ea:	f7ff ffa9 	bl	8001340 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80013ee:	20a6      	movs	r0, #166	; 0xa6
 80013f0:	f7ff ffa6 	bl	8001340 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80013f4:	20a8      	movs	r0, #168	; 0xa8
 80013f6:	f7ff ffa3 	bl	8001340 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013fa:	203f      	movs	r0, #63	; 0x3f
 80013fc:	f7ff ffa0 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001400:	20a4      	movs	r0, #164	; 0xa4
 8001402:	f7ff ff9d 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001406:	20d3      	movs	r0, #211	; 0xd3
 8001408:	f7ff ff9a 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff97 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001412:	20d5      	movs	r0, #213	; 0xd5
 8001414:	f7ff ff94 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001418:	20f0      	movs	r0, #240	; 0xf0
 800141a:	f7ff ff91 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800141e:	20d9      	movs	r0, #217	; 0xd9
 8001420:	f7ff ff8e 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001424:	2022      	movs	r0, #34	; 0x22
 8001426:	f7ff ff8b 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800142a:	20da      	movs	r0, #218	; 0xda
 800142c:	f7ff ff88 	bl	8001340 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001430:	2012      	movs	r0, #18
 8001432:	f7ff ff85 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001436:	20db      	movs	r0, #219	; 0xdb
 8001438:	f7ff ff82 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800143c:	2020      	movs	r0, #32
 800143e:	f7ff ff7f 	bl	8001340 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001442:	208d      	movs	r0, #141	; 0x8d
 8001444:	f7ff ff7c 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001448:	2014      	movs	r0, #20
 800144a:	f7ff ff79 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800144e:	2001      	movs	r0, #1
 8001450:	f000 f980 	bl	8001754 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f80f 	bl	8001478 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800145a:	f000 f825 	bl	80014a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <ssd1306_Init+0xd0>)
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <ssd1306_Init+0xd0>)
 8001466:	2200      	movs	r2, #0
 8001468:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800146a:	4b02      	ldr	r3, [pc, #8]	; (8001474 <ssd1306_Init+0xd0>)
 800146c:	2201      	movs	r2, #1
 800146e:	711a      	strb	r2, [r3, #4]
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200005d8 	.word	0x200005d8

08001478 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <ssd1306_Fill+0x14>
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <ssd1306_Fill+0x16>
 800148c:	23ff      	movs	r3, #255	; 0xff
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	4619      	mov	r1, r3
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <ssd1306_Fill+0x2c>)
 8001496:	f003 fcf9 	bl	8004e8c <memset>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001d8 	.word	0x200001d8

080014a8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e016      	b.n	80014e2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3b50      	subs	r3, #80	; 0x50
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff40 	bl	8001340 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff3d 	bl	8001340 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80014c6:	2010      	movs	r0, #16
 80014c8:	f7ff ff3a 	bl	8001340 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	01db      	lsls	r3, r3, #7
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <ssd1306_UpdateScreen+0x4c>)
 80014d2:	4413      	add	r3, r2
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff4a 	bl	8001370 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	3301      	adds	r3, #1
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b07      	cmp	r3, #7
 80014e6:	d9e5      	bls.n	80014b4 <ssd1306_UpdateScreen+0xc>
    }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001d8 	.word	0x200001d8

080014f8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	4613      	mov	r3, r2
 8001508:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db3d      	blt.n	800158e <ssd1306_DrawPixel+0x96>
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	2b3f      	cmp	r3, #63	; 0x3f
 8001516:	d83a      	bhi.n	800158e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001518:	797b      	ldrb	r3, [r7, #5]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d11a      	bne.n	8001554 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	01db      	lsls	r3, r3, #7
 800152a:	4413      	add	r3, r2
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <ssd1306_DrawPixel+0xa4>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	b25a      	sxtb	r2, r3
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	b25b      	sxtb	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b259      	sxtb	r1, r3
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	4603      	mov	r3, r0
 8001548:	01db      	lsls	r3, r3, #7
 800154a:	4413      	add	r3, r2
 800154c:	b2c9      	uxtb	r1, r1
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <ssd1306_DrawPixel+0xa4>)
 8001550:	54d1      	strb	r1, [r2, r3]
 8001552:	e01d      	b.n	8001590 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	b2d8      	uxtb	r0, r3
 800155c:	4603      	mov	r3, r0
 800155e:	01db      	lsls	r3, r3, #7
 8001560:	4413      	add	r3, r2
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <ssd1306_DrawPixel+0xa4>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	b25a      	sxtb	r2, r3
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4013      	ands	r3, r2
 800157c:	b259      	sxtb	r1, r3
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	4603      	mov	r3, r0
 8001582:	01db      	lsls	r3, r3, #7
 8001584:	4413      	add	r3, r2
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <ssd1306_DrawPixel+0xa4>)
 800158a:	54d1      	strb	r1, [r2, r3]
 800158c:	e000      	b.n	8001590 <ssd1306_DrawPixel+0x98>
        return;
 800158e:	bf00      	nop
    }
}
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200001d8 	.word	0x200001d8

080015a0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	1d38      	adds	r0, r7, #4
 80015aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80015ae:	461a      	mov	r2, r3
 80015b0:	4623      	mov	r3, r4
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	4613      	mov	r3, r2
 80015b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	d902      	bls.n	80015c4 <ssd1306_WriteChar+0x24>
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b7e      	cmp	r3, #126	; 0x7e
 80015c2:	d901      	bls.n	80015c8 <ssd1306_WriteChar+0x28>
        return 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e06d      	b.n	80016a4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <ssd1306_WriteChar+0x10c>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	793b      	ldrb	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	2b80      	cmp	r3, #128	; 0x80
 80015d4:	dc06      	bgt.n	80015e4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <ssd1306_WriteChar+0x10c>)
 80015d8:	885b      	ldrh	r3, [r3, #2]
 80015da:	461a      	mov	r2, r3
 80015dc:	797b      	ldrb	r3, [r7, #5]
 80015de:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015e0:	2b40      	cmp	r3, #64	; 0x40
 80015e2:	dd01      	ble.n	80015e8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e05d      	b.n	80016a4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	e04c      	b.n	8001688 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3b20      	subs	r3, #32
 80015f4:	7979      	ldrb	r1, [r7, #5]
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	440b      	add	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	e034      	b.n	8001678 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d012      	beq.n	8001644 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <ssd1306_WriteChar+0x10c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <ssd1306_WriteChar+0x10c>)
 800162e:	885b      	ldrh	r3, [r3, #2]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b2db      	uxtb	r3, r3
 800163a:	7bba      	ldrb	r2, [r7, #14]
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff ff5b 	bl	80014f8 <ssd1306_DrawPixel>
 8001642:	e016      	b.n	8001672 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <ssd1306_WriteChar+0x10c>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4413      	add	r3, r2
 8001650:	b2d8      	uxtb	r0, r3
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <ssd1306_WriteChar+0x10c>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4413      	add	r3, r2
 800165e:	b2d9      	uxtb	r1, r3
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	f7ff ff43 	bl	80014f8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3301      	adds	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4293      	cmp	r3, r2
 8001680:	d3c5      	bcc.n	800160e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	461a      	mov	r2, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4293      	cmp	r3, r2
 8001690:	d3ad      	bcc.n	80015ee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <ssd1306_WriteChar+0x10c>)
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	793b      	ldrb	r3, [r7, #4]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4413      	add	r3, r2
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <ssd1306_WriteChar+0x10c>)
 80016a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3724      	adds	r7, #36	; 0x24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	200005d8 	.word	0x200005d8

080016b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	1d38      	adds	r0, r7, #4
 80016ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80016be:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80016c0:	e012      	b.n	80016e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	7818      	ldrb	r0, [r3, #0]
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	1d3a      	adds	r2, r7, #4
 80016ca:	ca06      	ldmia	r2, {r1, r2}
 80016cc:	f7ff ff68 	bl	80015a0 <ssd1306_WriteChar>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d002      	beq.n	80016e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	e008      	b.n	80016f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e8      	bne.n	80016c2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	781b      	ldrb	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <ssd1306_SetCursor+0x2c>)
 8001712:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <ssd1306_SetCursor+0x2c>)
 800171a:	805a      	strh	r2, [r3, #2]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	200005d8 	.word	0x200005d8

0800172c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001736:	2381      	movs	r3, #129	; 0x81
 8001738:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fdff 	bl	8001340 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdfb 	bl	8001340 <ssd1306_WriteCommand>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001764:	23af      	movs	r3, #175	; 0xaf
 8001766:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <ssd1306_SetDisplayOn+0x38>)
 800176a:	2201      	movs	r2, #1
 800176c:	715a      	strb	r2, [r3, #5]
 800176e:	e004      	b.n	800177a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001770:	23ae      	movs	r3, #174	; 0xae
 8001772:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <ssd1306_SetDisplayOn+0x38>)
 8001776:	2200      	movs	r2, #0
 8001778:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fddf 	bl	8001340 <ssd1306_WriteCommand>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005d8 	.word	0x200005d8

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_I2C_MspInit+0x7c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d127      	bne.n	800184a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_I2C_MspInit+0x80>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_I2C_MspInit+0x84>)
 800182e:	f000 fa87 	bl	8001d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400

08001860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x38>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_TIM_Base_MspInit+0x3c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0x3c>)
 8001878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_TIM_Base_MspInit+0x3c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_UART_MspInit+0x80>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d129      	bne.n	8001916 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_UART_MspInit+0x84>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80018f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001904:	2307      	movs	r3, #7
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f000 fa15 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004400 	.word	0x40004400
 8001924:	40021000 	.word	0x40021000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f8ba 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f003 fa76 	bl	8004e9c <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20003000 	.word	0x20003000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	200005e0 	.word	0x200005e0
 80019e4:	20000730 	.word	0x20000730

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f003 fa35 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff fac7 	bl	8000fd0 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a50:	080065a4 	.word	0x080065a4
  ldr r2, =_sbss
 8001a54:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a58:	20000730 	.word	0x20000730

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f931 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fe88 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f93b 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f911 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000010 	.word	0x20000010
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	200005e4 	.word	0x200005e4

08001b14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200005e4 	.word	0x200005e4

08001b2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000010 	.word	0x20000010

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff47 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff5c 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffb0 	bl	8001c94 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e14e      	b.n	8001fee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8140 	beq.w	8001fe8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x40>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d017      	beq.n	8001e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d123      	bne.n	8001e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0203 	and.w	r2, r3, #3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 809a 	beq.w	8001fe8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ecc:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1e0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_GPIO_Init+0x2d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1dc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a45      	ldr	r2, [pc, #276]	; (8002018 <HAL_GPIO_Init+0x2d8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1d8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a44      	ldr	r2, [pc, #272]	; (800201c <HAL_GPIO_Init+0x2dc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1d4>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f20:	2300      	movs	r3, #0
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f32:	4937      	ldr	r1, [pc, #220]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f40:	4b37      	ldr	r3, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f64:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f8e:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f aea9 	bne.w	8001d50 <HAL_GPIO_Init+0x10>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	48000c00 	.word	0x48000c00
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e081      	b.n	800219a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fb94 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2224      	movs	r2, #36	; 0x24
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e006      	b.n	800210c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800210a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d104      	bne.n	800211e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800211c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	f040 80f9 	bne.w	80023be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x34>
 80021d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0ed      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Mem_Write+0x4e>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e0e6      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021fa:	f7ff fc8b 	bl	8001b14 <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2319      	movs	r3, #25
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f955 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0d1      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2221      	movs	r2, #33	; 0x21
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002244:	88f8      	ldrh	r0, [r7, #6]
 8002246:	893a      	ldrh	r2, [r7, #8]
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4603      	mov	r3, r0
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f8b9 	bl	80023cc <I2C_RequestMemoryWrite>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0a9      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d90e      	bls.n	8002294 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	22ff      	movs	r2, #255	; 0xff
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	b2da      	uxtb	r2, r3
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 facf 	bl	8002830 <I2C_TransferConfig>
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fabe 	bl	8002830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f94e 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07b      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d034      	beq.n	800236c <HAL_I2C_Mem_Write+0x1c8>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d130      	bne.n	800236c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	2200      	movs	r2, #0
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f8d1 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e04d      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d90e      	bls.n	800234c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa73 	bl	8002830 <I2C_TransferConfig>
 800234a:	e00f      	b.n	800236c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa62 	bl	8002830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d19e      	bne.n	80022b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f934 	bl	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e01a      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2220      	movs	r2, #32
 8002390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_I2C_Mem_Write+0x224>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	fe00e800 	.word	0xfe00e800

080023cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <I2C_RequestMemoryWrite+0xa4>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa1b 	bl	8002830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	69b9      	ldr	r1, [r7, #24]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8ab 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e02c      	b.n	8002468 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
 800241e:	e015      	b.n	800244c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	69b9      	ldr	r1, [r7, #24]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f891 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e012      	b.n	8002468 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2200      	movs	r2, #0
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f830 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	80002000 	.word	0x80002000

08002474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d103      	bne.n	8002492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	619a      	str	r2, [r3, #24]
  }
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e031      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d02d      	beq.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7ff fb1d 	bl	8001b14 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d122      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d113      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	429a      	cmp	r2, r3
 800254e:	d0be      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002566:	e033      	b.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f87f 	bl	8002670 <I2C_IsErrorOccurred>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e031      	b.n	80025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d025      	beq.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002584:	f7ff fac6 	bl	8001b14 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	d302      	bcc.n	800259a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11a      	bne.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d013      	beq.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d1c4      	bne.n	8002568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f4:	e02f      	b.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f838 	bl	8002670 <I2C_IsErrorOccurred>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02d      	b.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff fa83 	bl	8001b14 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11a      	bne.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d013      	beq.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d1c8      	bne.n	80025f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d068      	beq.n	800276e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2210      	movs	r2, #16
 80026a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a4:	e049      	b.n	800273a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d045      	beq.n	800273a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7ff fa31 	bl	8001b14 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_IsErrorOccurred+0x54>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d13a      	bne.n	800273a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e6:	d121      	bne.n	800272c <I2C_IsErrorOccurred+0xbc>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ee:	d01d      	beq.n	800272c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d01a      	beq.n	800272c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002704:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002706:	f7ff fa05 	bl	8001b14 <HAL_GetTick>
 800270a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	e00e      	b.n	800272c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800270e:	f7ff fa01 	bl	8001b14 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b19      	cmp	r3, #25
 800271a:	d907      	bls.n	800272c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800272a:	e006      	b.n	800273a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b20      	cmp	r3, #32
 8002738:	d1e9      	bne.n	800270e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d003      	beq.n	8002750 <I2C_IsErrorOccurred+0xe0>
 8002748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0aa      	beq.n	80026a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe45 	bl	8002474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <I2C_IsErrorOccurred+0x1bc>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800281e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002822:	4618      	mov	r0, r3
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	fe00e800 	.word	0xfe00e800

08002830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	4613      	mov	r3, r2
 8002840:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002848:	7a7b      	ldrb	r3, [r7, #9]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002850:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	4313      	orrs	r3, r2
 800285a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800285e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	0d5b      	lsrs	r3, r3, #21
 800286a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <I2C_TransferConfig+0x60>)
 8002870:	430b      	orrs	r3, r1
 8002872:	43db      	mvns	r3, r3
 8002874:	ea02 0103 	and.w	r1, r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	03ff63ff 	.word	0x03ff63ff

08002894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d138      	bne.n	800291c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e032      	b.n	800291e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d139      	bne.n	80029b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800294a:	2302      	movs	r3, #2
 800294c:	e033      	b.n	80029b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800297c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f001 b823 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 817d 	beq.w	8002cfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a00:	4bbc      	ldr	r3, [pc, #752]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a0c:	4bb9      	ldr	r3, [pc, #740]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d15c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x10e>
 8002a18:	4bb6      	ldr	r3, [pc, #728]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d155      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x10e>
 8002a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x94>
 8002a52:	4ba8      	ldr	r3, [pc, #672]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a80:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 811f 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8116 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f000 bfaf 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12e>
 8002ae4:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a82      	ldr	r2, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e036      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x158>
 8002b02:	4b7c      	ldr	r3, [pc, #496]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7b      	ldr	r2, [pc, #492]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a78      	ldr	r2, [pc, #480]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e021      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x184>
 8002b2e:	4b71      	ldr	r3, [pc, #452]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a70      	ldr	r2, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6d      	ldr	r2, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b60:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f023 020f 	bic.w	r2, r3, #15
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	495f      	ldr	r1, [pc, #380]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d059      	beq.n	8002c3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe ffc3 	bl	8001b14 <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe ffbe 	bl	8001b14 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 bf43 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_OscConfig+0x218>
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_OscConfig+0x244>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bf8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f002 021f 	and.w	r2, r2, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ab      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1d0>
 8002c3c:	e05d      	b.n	8002cfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe ff69 	bl	8001b14 <HAL_GetTick>
 8002c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe ff64 	bl	8001b14 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d902      	bls.n	8002c5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f000 bee9 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2cc>
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_OscConfig+0x2f8>
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ab      	bne.n	8002c48 <HAL_RCC_OscConfig+0x284>
 8002cf0:	e003      	b.n	8002cfa <HAL_RCC_OscConfig+0x336>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 817d 	beq.w	800300a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d10:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d1c:	4ba3      	ldr	r3, [pc, #652]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d172      	bne.n	8002e0e <HAL_RCC_OscConfig+0x44a>
 8002d28:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d16c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x44a>
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3a0>
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e013      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c8>
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d88:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 021f 	and.w	r2, r2, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x410>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f000 be2e 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b75      	ldr	r3, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	21f8      	movs	r1, #248	; 0xf8
 8002dea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002df2:	fa91 f1a1 	rbit	r1, r1
 8002df6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dfa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dfe:	fab1 f181 	clz	r1, r1
 8002e02:	b2c9      	uxtb	r1, r1
 8002e04:	408b      	lsls	r3, r1
 8002e06:	4969      	ldr	r1, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0c:	e0fd      	b.n	800300a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8088 	beq.w	8002f30 <HAL_RCC_OscConfig+0x56c>
 8002e20:	2301      	movs	r3, #1
 8002e22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fe62 	bl	8001b14 <HAL_GetTick>
 8002e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe fe5d 	bl	8001b14 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	f000 bde2 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4d8>
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x500>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002eb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002eca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ece:	fa92 f2a2 	rbit	r2, r2
 8002ed2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ed6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0af      	beq.n	8002e56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	21f8      	movs	r1, #248	; 0xf8
 8002f0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f14:	fa91 f1a1 	rbit	r1, r1
 8002f18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f20:	fab1 f181 	clz	r1, r1
 8002f24:	b2c9      	uxtb	r1, r1
 8002f26:	408b      	lsls	r3, r1
 8002f28:	4920      	ldr	r1, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
 8002f2e:	e06c      	b.n	800300a <HAL_RCC_OscConfig+0x646>
 8002f30:	2301      	movs	r3, #1
 8002f32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	461a      	mov	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fdda 	bl	8001b14 <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fdd5 	bl	8001b14 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d902      	bls.n	8002f7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	f000 bd5a 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d104      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5ec>
 8002fa6:	4b01      	ldr	r3, [pc, #4]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e015      	b.n	8002fd8 <HAL_RCC_OscConfig+0x614>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fd4:	4bc8      	ldr	r3, [pc, #800]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fe2:	fa92 f2a2 	rbit	r2, r2
 8002fe6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f002 021f 	and.w	r2, r2, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ad      	bne.n	8002f66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8110 	beq.w	8003240 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d079      	beq.n	8003124 <HAL_RCC_OscConfig+0x760>
 8003030:	2301      	movs	r3, #1
 8003032:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4bab      	ldr	r3, [pc, #684]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2301      	movs	r3, #1
 8003058:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fd5b 	bl	8001b14 <HAL_GetTick>
 800305e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe fd56 	bl	8001b14 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	f000 bcdb 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030b8:	2202      	movs	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80030d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030e0:	2102      	movs	r1, #2
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f1a3 	rbit	r1, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030fa:	6019      	str	r1, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0a0      	beq.n	8003064 <HAL_RCC_OscConfig+0x6a0>
 8003122:	e08d      	b.n	8003240 <HAL_RCC_OscConfig+0x87c>
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003150:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fcd5 	bl	8001b14 <HAL_GetTick>
 800316a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fcd0 	bl	8001b14 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	f000 bc55 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80031f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031fe:	2102      	movs	r1, #2
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f1a3 	rbit	r1, r3
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003218:	6019      	str	r1, [r3, #0]
  return result;
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2101      	movs	r1, #1
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d197      	bne.n	8003170 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 81a1 	beq.w	8003598 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	61d3      	str	r3, [r2, #28]
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800328e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fc31 	bl	8001b14 <HAL_GetTick>
 80032b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	e009      	b.n	80032cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fe fc2c 	bl	8001b14 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e3b1      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x940>
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e03c      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	10908120 	.word	0x10908120
 8003300:	40007000 	.word	0x40007000
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x96a>
 8003314:	4bc1      	ldr	r3, [pc, #772]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4ac0      	ldr	r2, [pc, #768]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	4bbe      	ldr	r3, [pc, #760]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4abd      	ldr	r2, [pc, #756]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	e020      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x994>
 800333e:	4bb7      	ldr	r3, [pc, #732]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4ab6      	ldr	r2, [pc, #728]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6213      	str	r3, [r2, #32]
 800334a:	4bb4      	ldr	r3, [pc, #720]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4ab3      	ldr	r2, [pc, #716]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 8003358:	4bb0      	ldr	r3, [pc, #704]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4aaf      	ldr	r2, [pc, #700]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	4bad      	ldr	r3, [pc, #692]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4aac      	ldr	r2, [pc, #688]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8081 	beq.w	8003484 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fbc7 	bl	8001b14 <HAL_GetTick>
 8003386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fbc2 	bl	8001b14 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e345      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033d0:	2202      	movs	r2, #2
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ea:	601a      	str	r2, [r3, #0]
  return result;
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d102      	bne.n	8003410 <HAL_RCC_OscConfig+0xa4c>
 800340a:	4b84      	ldr	r3, [pc, #528]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	e013      	b.n	8003438 <HAL_RCC_OscConfig+0xa74>
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003440:	2102      	movs	r1, #2
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003448:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	fa92 f1a2 	rbit	r1, r2
 8003452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003456:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800345a:	6011      	str	r1, [r2, #0]
  return result;
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d084      	beq.n	800338c <HAL_RCC_OscConfig+0x9c8>
 8003482:	e07f      	b.n	8003584 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fb46 	bl	8001b14 <HAL_GetTick>
 8003488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fb41 	bl	8001b14 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e2c4      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034ec:	601a      	str	r2, [r3, #0]
  return result;
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f043 0302 	orr.w	r3, r3, #2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d102      	bne.n	8003512 <HAL_RCC_OscConfig+0xb4e>
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	e013      	b.n	800353a <HAL_RCC_OscConfig+0xb76>
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003542:	2102      	movs	r1, #2
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fa92 f1a2 	rbit	r1, r2
 8003554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003558:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800355c:	6011      	str	r1, [r2, #0]
  return result;
 800355e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003562:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d184      	bne.n	800348e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003584:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8242 	beq.w	8003a2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	f000 8213 	beq.w	80039de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 8162 	bne.w	800388e <HAL_RCC_OscConfig+0xeca>
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ee:	601a      	str	r2, [r3, #0]
  return result;
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fa80 	bl	8001b14 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e00c      	b.n	8003634 <HAL_RCC_OscConfig+0xc70>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe fa78 	bl	8001b14 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1fd      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800363c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003658:	601a      	str	r2, [r3, #0]
  return result;
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003662:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0xcba>
 8003678:	4bb0      	ldr	r3, [pc, #704]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e027      	b.n	80036ce <HAL_RCC_OscConfig+0xd0a>
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b9c      	ldr	r3, [pc, #624]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	fa92 f1a2 	rbit	r1, r2
 80036ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036f2:	6011      	str	r1, [r2, #0]
  return result;
 80036f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d182      	bne.n	8003620 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371a:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	430b      	orrs	r3, r1
 800373c:	497f      	ldr	r1, [pc, #508]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800374a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003770:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	2301      	movs	r3, #1
 8003786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe f9c4 	bl	8001b14 <HAL_GetTick>
 800378c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe f9bf 	bl	8001b14 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e144      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037ca:	601a      	str	r2, [r3, #0]
  return result;
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_OscConfig+0xe2c>
 80037ea:	4b54      	ldr	r3, [pc, #336]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e027      	b.n	8003840 <HAL_RCC_OscConfig+0xe7c>
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fa93 f2a3 	rbit	r2, r3
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800381e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4b3f      	ldr	r3, [pc, #252]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003844:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003848:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003852:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fa92 f1a2 	rbit	r1, r2
 800385c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003860:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f042 0220 	orr.w	r2, r2, #32
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f002 021f 	and.w	r2, r2, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d082      	beq.n	8003792 <HAL_RCC_OscConfig+0xdce>
 800388c:	e0cf      	b.n	8003a2e <HAL_RCC_OscConfig+0x106a>
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800389a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038b2:	601a      	str	r2, [r3, #0]
  return result;
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe f91e 	bl	8001b14 <HAL_GetTick>
 80038d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038dc:	e009      	b.n	80038f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe f919 	bl	8001b14 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e09e      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003916:	601a      	str	r2, [r3, #0]
  return result;
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003920:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d104      	bne.n	8003940 <HAL_RCC_OscConfig+0xf7c>
 8003936:	4b01      	ldr	r3, [pc, #4]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	e029      	b.n	8003990 <HAL_RCC_OscConfig+0xfcc>
 800393c:	40021000 	.word	0x40021000
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f2a3 	rbit	r2, r3
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800396e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	fa93 f2a3 	rbit	r2, r3
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x1078>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003994:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003998:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	fa92 f1a2 	rbit	r1, r2
 80039ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039b4:	6011      	str	r1, [r2, #0]
  return result;
 80039b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d180      	bne.n	80038de <HAL_RCC_OscConfig+0xf1a>
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01e      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_OscConfig+0x1078>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10b      	bne.n	8003a2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09e      	sub	sp, #120	; 0x78
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e162      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	498b      	ldr	r1, [pc, #556]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e14a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	497f      	ldr	r1, [pc, #508]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80dc 	beq.w	8003c6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d13c      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xf6>
 8003abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xa6>
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	e00f      	b.n	8003b06 <HAL_RCC_ClockConfig+0xc6>
 8003ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	667b      	str	r3, [r7, #100]	; 0x64
 8003af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af8:	663b      	str	r3, [r7, #96]	; 0x60
 8003afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b02:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b16:	fab2 f282 	clz	r2, r2
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f042 0220 	orr.w	r2, r2, #32
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f002 021f 	and.w	r2, r2, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d17b      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0f3      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d13c      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x178>
 8003b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x128>
 8003b62:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	e00f      	b.n	8003b88 <HAL_RCC_ClockConfig+0x148>
 8003b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
 8003b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f042 0220 	orr.w	r2, r2, #32
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f002 021f 	and.w	r2, r2, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13a      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b2      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_ClockConfig+0x1bc>
 8003be0:	2302      	movs	r3, #2
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	61ba      	str	r2, [r7, #24]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	fa92 f2a2 	rbit	r2, r2
 8003c06:	617a      	str	r2, [r7, #20]
  return result;
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	fab2 f282 	clz	r2, r2
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f042 0220 	orr.w	r2, r2, #32
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e079      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	491a      	ldr	r1, [pc, #104]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fd ff6a 	bl	8001b14 <HAL_GetTick>
 8003c40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fd ff66 	bl	8001b14 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e061      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d214      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4906      	ldr	r1, [pc, #24]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e040      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	491a      	ldr	r1, [pc, #104]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4912      	ldr	r1, [pc, #72]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ce2:	f000 f829 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf0:	22f0      	movs	r2, #240	; 0xf0
 8003cf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fa92 f2a2 	rbit	r2, r2
 8003cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	40d3      	lsrs	r3, r2
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x2ec>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_RCC_ClockConfig+0x2f0>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCC_ClockConfig+0x2f4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd feb8 	bl	8001a8c <HAL_InitTick>
  
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3778      	adds	r7, #120	; 0x78
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08006530 	.word	0x08006530
 8003d30:	20000008 	.word	0x20000008
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b08b      	sub	sp, #44	; 0x2c
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x30>
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x36>
 8003d66:	e03c      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d6a:	623b      	str	r3, [r7, #32]
      break;
 8003d6c:	e03c      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	fa92 f2a2 	rbit	r2, r2
 8003d80:	607a      	str	r2, [r7, #4]
  return result;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	fab2 f282 	clz	r2, r2
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	40d3      	lsrs	r3, r2
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	fa92 f2a2 	rbit	r2, r2
 8003da4:	60fa      	str	r2, [r7, #12]
  return result;
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	fab2 f282 	clz	r2, r2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	40d3      	lsrs	r3, r2
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e004      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	623b      	str	r3, [r7, #32]
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003de4:	623b      	str	r3, [r7, #32]
      break;
 8003de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	372c      	adds	r7, #44	; 0x2c
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08006548 	.word	0x08006548
 8003e04:	08006558 	.word	0x08006558
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000008 	.word	0x20000008

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e2a:	f7ff ffef 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	603a      	str	r2, [r7, #0]
  return result;
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08006540 	.word	0x08006540

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e6e:	f7ff ffcd 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e72:	4601      	mov	r1, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	603a      	str	r2, [r7, #0]
  return result;
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08006540 	.word	0x08006540

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b092      	sub	sp, #72	; 0x48
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80cd 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed0:	4b86      	ldr	r3, [pc, #536]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b83      	ldr	r3, [pc, #524]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a82      	ldr	r2, [pc, #520]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	61d3      	str	r3, [r2, #28]
 8003ee8:	4b80      	ldr	r3, [pc, #512]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fd fdff 	bl	8001b14 <HAL_GetTick>
 8003f16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd fdfb 	bl	8001b14 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0db      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f38:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d07d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d076      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2301      	movs	r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fa8:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d045      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fdac 	bl	8001b14 <HAL_GetTick>
 8003fbc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fd fda8 	bl	8001b14 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e086      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	61fb      	str	r3, [r7, #28]
  return result;
 8003fee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d102      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	e007      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800400a:	2302      	movs	r3, #2
 800400c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	4b35      	ldr	r3, [pc, #212]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2202      	movs	r2, #2
 800401c:	613a      	str	r2, [r7, #16]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	fa92 f2a2 	rbit	r2, r2
 8004024:	60fa      	str	r2, [r7, #12]
  return result;
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0bd      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4926      	ldr	r1, [pc, #152]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004052:	4313      	orrs	r3, r2
 8004054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	491a      	ldr	r1, [pc, #104]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004084:	4313      	orrs	r3, r2
 8004086:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f023 0210 	bic.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4912      	ldr	r1, [pc, #72]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	490b      	ldr	r1, [pc, #44]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3748      	adds	r7, #72	; 0x48
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
 80040f4:	10908100 	.word	0x10908100

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd fb9e 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f954 	bl	80043e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e038      	b.n	8004232 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIM_Base_Start+0x98>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start+0x48>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start+0x48>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_TIM_Base_Start+0x9c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start+0x48>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_TIM_Base_Start+0xa0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d115      	bne.n	800421c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_TIM_Base_Start+0xa4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d015      	beq.n	800422e <HAL_TIM_Base_Start+0x86>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004208:	d011      	beq.n	800422e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	e008      	b.n	800422e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e000      	b.n	8004230 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40014000 	.word	0x40014000
 800424c:	00010007 	.word	0x00010007

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIM_ConfigClockSource+0x1c>
 8004268:	2302      	movs	r3, #2
 800426a:	e0b6      	b.n	80043da <HAL_TIM_ConfigClockSource+0x18a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a8:	d03e      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0xd8>
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	f200 8087 	bhi.w	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	f000 8086 	beq.w	80043c6 <HAL_TIM_ConfigClockSource+0x176>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	d87f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042c0:	2b70      	cmp	r3, #112	; 0x70
 80042c2:	d01a      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xaa>
 80042c4:	2b70      	cmp	r3, #112	; 0x70
 80042c6:	d87b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042c8:	2b60      	cmp	r3, #96	; 0x60
 80042ca:	d050      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x11e>
 80042cc:	2b60      	cmp	r3, #96	; 0x60
 80042ce:	d877      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042d0:	2b50      	cmp	r3, #80	; 0x50
 80042d2:	d03c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0xfe>
 80042d4:	2b50      	cmp	r3, #80	; 0x50
 80042d6:	d873      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d058      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x13e>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d86f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	d064      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042e4:	2b30      	cmp	r3, #48	; 0x30
 80042e6:	d86b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d060      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d867      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d05a      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x15e>
 80042f8:	e062      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800430a:	f000 f95d 	bl	80045c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800431c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	609a      	str	r2, [r3, #8]
      break;
 8004326:	e04f      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004338:	f000 f946 	bl	80045c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434a:	609a      	str	r2, [r3, #8]
      break;
 800434c:	e03c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 f8ba 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2150      	movs	r1, #80	; 0x50
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f913 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800436c:	e02c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f8d9 	bl	8004532 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2160      	movs	r1, #96	; 0x60
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f903 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800438c:	e01c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f89a 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2140      	movs	r1, #64	; 0x40
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f8f3 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e00c      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f000 f8ea 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 80043be:	e003      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e000      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a32      	ldr	r2, [pc, #200]	; (80044c0 <TIM_Base_SetConfig+0xdc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0x28>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0x28>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <TIM_Base_SetConfig+0xe0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d108      	bne.n	800441e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <TIM_Base_SetConfig+0xdc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <TIM_Base_SetConfig+0x6a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d00f      	beq.n	800444e <TIM_Base_SetConfig+0x6a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_Base_SetConfig+0xe0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0x6a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_Base_SetConfig+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0x6a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <TIM_Base_SetConfig+0xe8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0x6a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <TIM_Base_SetConfig+0xec>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <TIM_Base_SetConfig+0xdc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0xc0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0e      	ldr	r2, [pc, #56]	; (80044c8 <TIM_Base_SetConfig+0xe4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0xc0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0d      	ldr	r2, [pc, #52]	; (80044cc <TIM_Base_SetConfig+0xe8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0xc0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <TIM_Base_SetConfig+0xec>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d103      	bne.n	80044ac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	615a      	str	r2, [r3, #20]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e054      	b.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004650:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d009      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10c      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd f8ca 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f82c 	bl	8004780 <UART_SetConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e022      	b.n	8004778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f956 	bl	80049ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9dd 	bl	8004b30 <UART_CheckIdleState>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b8a      	ldr	r3, [pc, #552]	; (80049d4 <UART_SetConfig+0x254>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a78      	ldr	r2, [pc, #480]	; (80049d8 <UART_SetConfig+0x258>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0xbe>
 80047fc:	4b77      	ldr	r3, [pc, #476]	; (80049dc <UART_SetConfig+0x25c>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d817      	bhi.n	8004838 <UART_SetConfig+0xb8>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x90>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004821 	.word	0x08004821
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004833 	.word	0x08004833
 800481c:	08004827 	.word	0x08004827
 8004820:	2300      	movs	r3, #0
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e01d      	b.n	8004862 <UART_SetConfig+0xe2>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e01a      	b.n	8004862 <UART_SetConfig+0xe2>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e017      	b.n	8004862 <UART_SetConfig+0xe2>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e014      	b.n	8004862 <UART_SetConfig+0xe2>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e011      	b.n	8004862 <UART_SetConfig+0xe2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a67      	ldr	r2, [pc, #412]	; (80049e0 <UART_SetConfig+0x260>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d102      	bne.n	800484e <UART_SetConfig+0xce>
 8004848:	2300      	movs	r3, #0
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0xe2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a64      	ldr	r2, [pc, #400]	; (80049e4 <UART_SetConfig+0x264>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d102      	bne.n	800485e <UART_SetConfig+0xde>
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e001      	b.n	8004862 <UART_SetConfig+0xe2>
 800485e:	2310      	movs	r3, #16
 8004860:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d15a      	bne.n	8004922 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800486c:	7ffb      	ldrb	r3, [r7, #31]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d827      	bhi.n	80048c2 <UART_SetConfig+0x142>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0xf8>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048a5 	.word	0x080048a5
 8004880:	080048ad 	.word	0x080048ad
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048c3 	.word	0x080048c3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7ff fac2 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80048a0:	61b8      	str	r0, [r7, #24]
        break;
 80048a2:	e013      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7ff fae0 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 80048a8:	61b8      	str	r0, [r7, #24]
        break;
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b4e      	ldr	r3, [pc, #312]	; (80049e8 <UART_SetConfig+0x268>)
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e00c      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7ff fa41 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 80048b6:	61b8      	str	r0, [r7, #24]
        break;
 80048b8:	e008      	b.n	80048cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e004      	b.n	80048cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d074      	beq.n	80049bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	005a      	lsls	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d916      	bls.n	800491c <UART_SetConfig+0x19c>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d212      	bcs.n	800491c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f023 030f 	bic.w	r3, r3, #15
 80048fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	b29a      	uxth	r2, r3
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	4313      	orrs	r3, r2
 8004910:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	89fa      	ldrh	r2, [r7, #14]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e04f      	b.n	80049bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	77bb      	strb	r3, [r7, #30]
 8004920:	e04c      	b.n	80049bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	7ffb      	ldrb	r3, [r7, #31]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d828      	bhi.n	800497a <UART_SetConfig+0x1fa>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x1b0>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7ff fa66 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8004958:	61b8      	str	r0, [r7, #24]
        break;
 800495a:	e013      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7ff fa84 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <UART_SetConfig+0x268>)
 8004966:	61bb      	str	r3, [r7, #24]
        break;
 8004968:	e00c      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7ff f9e5 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 800496e:	61b8      	str	r0, [r7, #24]
        break;
 8004970:	e008      	b.n	8004984 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e004      	b.n	8004984 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	77bb      	strb	r3, [r7, #30]
        break;
 8004982:	bf00      	nop
    }

    if (pclk != 0U)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085a      	lsrs	r2, r3, #1
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b0f      	cmp	r3, #15
 80049a2:	d909      	bls.n	80049b8 <UART_SetConfig+0x238>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d205      	bcs.n	80049b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e001      	b.n	80049bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	efff69f3 	.word	0xefff69f3
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40004800 	.word	0x40004800
 80049e8:	007a1200 	.word	0x007a1200

080049ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d10a      	bne.n	8004b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b098      	sub	sp, #96	; 0x60
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b40:	f7fc ffe8 	bl	8001b14 <HAL_GetTick>
 8004b44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d12e      	bne.n	8004bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f88c 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d021      	beq.n	8004bb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e6      	bne.n	8004b6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e062      	b.n	8004c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d149      	bne.n	8004c54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f856 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d03c      	beq.n	8004c54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	623b      	str	r3, [r7, #32]
   return(result);
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2c:	61fa      	str	r2, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e011      	b.n	8004c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3758      	adds	r7, #88	; 0x58
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c90:	e049      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d045      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fc ff3b 	bl	8001b14 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e048      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d031      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d110      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f838 	bl	8004d4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e029      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d00:	d111      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f81e 	bl	8004d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d0a6      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b095      	sub	sp, #84	; 0x54
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
 8004d76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e5      	bne.n	8004d88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d118      	bne.n	8004df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e6      	bne.n	8004dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e0a:	bf00      	nop
 8004e0c:	3754      	adds	r7, #84	; 0x54
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <siprintf>:
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b500      	push	{lr}
 8004e1c:	b09c      	sub	sp, #112	; 0x70
 8004e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e20:	9002      	str	r0, [sp, #8]
 8004e22:	9006      	str	r0, [sp, #24]
 8004e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e28:	4809      	ldr	r0, [pc, #36]	; (8004e50 <siprintf+0x38>)
 8004e2a:	9107      	str	r1, [sp, #28]
 8004e2c:	9104      	str	r1, [sp, #16]
 8004e2e:	4909      	ldr	r1, [pc, #36]	; (8004e54 <siprintf+0x3c>)
 8004e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	6800      	ldr	r0, [r0, #0]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	a902      	add	r1, sp, #8
 8004e3c:	f000 f9ba 	bl	80051b4 <_svfiprintf_r>
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	b01c      	add	sp, #112	; 0x70
 8004e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e4c:	b003      	add	sp, #12
 8004e4e:	4770      	bx	lr
 8004e50:	20000060 	.word	0x20000060
 8004e54:	ffff0208 	.word	0xffff0208

08004e58 <memmove>:
 8004e58:	4288      	cmp	r0, r1
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	eb01 0402 	add.w	r4, r1, r2
 8004e60:	d902      	bls.n	8004e68 <memmove+0x10>
 8004e62:	4284      	cmp	r4, r0
 8004e64:	4623      	mov	r3, r4
 8004e66:	d807      	bhi.n	8004e78 <memmove+0x20>
 8004e68:	1e43      	subs	r3, r0, #1
 8004e6a:	42a1      	cmp	r1, r4
 8004e6c:	d008      	beq.n	8004e80 <memmove+0x28>
 8004e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e76:	e7f8      	b.n	8004e6a <memmove+0x12>
 8004e78:	4402      	add	r2, r0
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	428a      	cmp	r2, r1
 8004e7e:	d100      	bne.n	8004e82 <memmove+0x2a>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e8a:	e7f7      	b.n	8004e7c <memmove+0x24>

08004e8c <memset>:
 8004e8c:	4402      	add	r2, r0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d100      	bne.n	8004e96 <memset+0xa>
 8004e94:	4770      	bx	lr
 8004e96:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9a:	e7f9      	b.n	8004e90 <memset+0x4>

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000060 	.word	0x20000060

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	; (8004eec <__libc_init_array+0x44>)
 8004ebc:	f000 fc50 	bl	8005760 <_init>
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	0800659c 	.word	0x0800659c
 8004ee4:	0800659c 	.word	0x0800659c
 8004ee8:	0800659c 	.word	0x0800659c
 8004eec:	080065a0 	.word	0x080065a0

08004ef0 <__retarget_lock_acquire_recursive>:
 8004ef0:	4770      	bx	lr

08004ef2 <__retarget_lock_release_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <memcpy>:
 8004ef4:	440a      	add	r2, r1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004efc:	d100      	bne.n	8004f00 <memcpy+0xc>
 8004efe:	4770      	bx	lr
 8004f00:	b510      	push	{r4, lr}
 8004f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d1f9      	bne.n	8004f02 <memcpy+0xe>
 8004f0e:	bd10      	pop	{r4, pc}

08004f10 <_free_r>:
 8004f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f12:	2900      	cmp	r1, #0
 8004f14:	d044      	beq.n	8004fa0 <_free_r+0x90>
 8004f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1a:	9001      	str	r0, [sp, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f22:	bfb8      	it	lt
 8004f24:	18e4      	addlt	r4, r4, r3
 8004f26:	f000 f8df 	bl	80050e8 <__malloc_lock>
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <_free_r+0x94>)
 8004f2c:	9801      	ldr	r0, [sp, #4]
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	b933      	cbnz	r3, 8004f40 <_free_r+0x30>
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	6014      	str	r4, [r2, #0]
 8004f36:	b003      	add	sp, #12
 8004f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f3c:	f000 b8da 	b.w	80050f4 <__malloc_unlock>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d908      	bls.n	8004f56 <_free_r+0x46>
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	1961      	adds	r1, r4, r5
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf01      	itttt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	1949      	addeq	r1, r1, r5
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	e7ed      	b.n	8004f32 <_free_r+0x22>
 8004f56:	461a      	mov	r2, r3
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b10b      	cbz	r3, 8004f60 <_free_r+0x50>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d9fa      	bls.n	8004f56 <_free_r+0x46>
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	1855      	adds	r5, r2, r1
 8004f64:	42a5      	cmp	r5, r4
 8004f66:	d10b      	bne.n	8004f80 <_free_r+0x70>
 8004f68:	6824      	ldr	r4, [r4, #0]
 8004f6a:	4421      	add	r1, r4
 8004f6c:	1854      	adds	r4, r2, r1
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	d1e0      	bne.n	8004f36 <_free_r+0x26>
 8004f74:	681c      	ldr	r4, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	6053      	str	r3, [r2, #4]
 8004f7a:	440c      	add	r4, r1
 8004f7c:	6014      	str	r4, [r2, #0]
 8004f7e:	e7da      	b.n	8004f36 <_free_r+0x26>
 8004f80:	d902      	bls.n	8004f88 <_free_r+0x78>
 8004f82:	230c      	movs	r3, #12
 8004f84:	6003      	str	r3, [r0, #0]
 8004f86:	e7d6      	b.n	8004f36 <_free_r+0x26>
 8004f88:	6825      	ldr	r5, [r4, #0]
 8004f8a:	1961      	adds	r1, r4, r5
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	bf04      	itt	eq
 8004f90:	6819      	ldreq	r1, [r3, #0]
 8004f92:	685b      	ldreq	r3, [r3, #4]
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	bf04      	itt	eq
 8004f98:	1949      	addeq	r1, r1, r5
 8004f9a:	6021      	streq	r1, [r4, #0]
 8004f9c:	6054      	str	r4, [r2, #4]
 8004f9e:	e7ca      	b.n	8004f36 <_free_r+0x26>
 8004fa0:	b003      	add	sp, #12
 8004fa2:	bd30      	pop	{r4, r5, pc}
 8004fa4:	20000728 	.word	0x20000728

08004fa8 <sbrk_aligned>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4e0e      	ldr	r6, [pc, #56]	; (8004fe4 <sbrk_aligned+0x3c>)
 8004fac:	460c      	mov	r4, r1
 8004fae:	6831      	ldr	r1, [r6, #0]
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	b911      	cbnz	r1, 8004fba <sbrk_aligned+0x12>
 8004fb4:	f000 fb8c 	bl	80056d0 <_sbrk_r>
 8004fb8:	6030      	str	r0, [r6, #0]
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 fb87 	bl	80056d0 <_sbrk_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d00a      	beq.n	8004fdc <sbrk_aligned+0x34>
 8004fc6:	1cc4      	adds	r4, r0, #3
 8004fc8:	f024 0403 	bic.w	r4, r4, #3
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d007      	beq.n	8004fe0 <sbrk_aligned+0x38>
 8004fd0:	1a21      	subs	r1, r4, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 fb7c 	bl	80056d0 <_sbrk_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d101      	bne.n	8004fe0 <sbrk_aligned+0x38>
 8004fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	2000072c 	.word	0x2000072c

08004fe8 <_malloc_r>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	1ccd      	adds	r5, r1, #3
 8004fee:	f025 0503 	bic.w	r5, r5, #3
 8004ff2:	3508      	adds	r5, #8
 8004ff4:	2d0c      	cmp	r5, #12
 8004ff6:	bf38      	it	cc
 8004ff8:	250c      	movcc	r5, #12
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	db01      	blt.n	8005004 <_malloc_r+0x1c>
 8005000:	42a9      	cmp	r1, r5
 8005002:	d905      	bls.n	8005010 <_malloc_r+0x28>
 8005004:	230c      	movs	r3, #12
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	2600      	movs	r6, #0
 800500a:	4630      	mov	r0, r6
 800500c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050e4 <_malloc_r+0xfc>
 8005014:	f000 f868 	bl	80050e8 <__malloc_lock>
 8005018:	f8d8 3000 	ldr.w	r3, [r8]
 800501c:	461c      	mov	r4, r3
 800501e:	bb5c      	cbnz	r4, 8005078 <_malloc_r+0x90>
 8005020:	4629      	mov	r1, r5
 8005022:	4638      	mov	r0, r7
 8005024:	f7ff ffc0 	bl	8004fa8 <sbrk_aligned>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	4604      	mov	r4, r0
 800502c:	d155      	bne.n	80050da <_malloc_r+0xf2>
 800502e:	f8d8 4000 	ldr.w	r4, [r8]
 8005032:	4626      	mov	r6, r4
 8005034:	2e00      	cmp	r6, #0
 8005036:	d145      	bne.n	80050c4 <_malloc_r+0xdc>
 8005038:	2c00      	cmp	r4, #0
 800503a:	d048      	beq.n	80050ce <_malloc_r+0xe6>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	4631      	mov	r1, r6
 8005040:	4638      	mov	r0, r7
 8005042:	eb04 0903 	add.w	r9, r4, r3
 8005046:	f000 fb43 	bl	80056d0 <_sbrk_r>
 800504a:	4581      	cmp	r9, r0
 800504c:	d13f      	bne.n	80050ce <_malloc_r+0xe6>
 800504e:	6821      	ldr	r1, [r4, #0]
 8005050:	1a6d      	subs	r5, r5, r1
 8005052:	4629      	mov	r1, r5
 8005054:	4638      	mov	r0, r7
 8005056:	f7ff ffa7 	bl	8004fa8 <sbrk_aligned>
 800505a:	3001      	adds	r0, #1
 800505c:	d037      	beq.n	80050ce <_malloc_r+0xe6>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	442b      	add	r3, r5
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d038      	beq.n	80050de <_malloc_r+0xf6>
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	42a2      	cmp	r2, r4
 8005070:	d12b      	bne.n	80050ca <_malloc_r+0xe2>
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e00f      	b.n	8005098 <_malloc_r+0xb0>
 8005078:	6822      	ldr	r2, [r4, #0]
 800507a:	1b52      	subs	r2, r2, r5
 800507c:	d41f      	bmi.n	80050be <_malloc_r+0xd6>
 800507e:	2a0b      	cmp	r2, #11
 8005080:	d917      	bls.n	80050b2 <_malloc_r+0xca>
 8005082:	1961      	adds	r1, r4, r5
 8005084:	42a3      	cmp	r3, r4
 8005086:	6025      	str	r5, [r4, #0]
 8005088:	bf18      	it	ne
 800508a:	6059      	strne	r1, [r3, #4]
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	bf08      	it	eq
 8005090:	f8c8 1000 	streq.w	r1, [r8]
 8005094:	5162      	str	r2, [r4, r5]
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	4638      	mov	r0, r7
 800509a:	f104 060b 	add.w	r6, r4, #11
 800509e:	f000 f829 	bl	80050f4 <__malloc_unlock>
 80050a2:	f026 0607 	bic.w	r6, r6, #7
 80050a6:	1d23      	adds	r3, r4, #4
 80050a8:	1af2      	subs	r2, r6, r3
 80050aa:	d0ae      	beq.n	800500a <_malloc_r+0x22>
 80050ac:	1b9b      	subs	r3, r3, r6
 80050ae:	50a3      	str	r3, [r4, r2]
 80050b0:	e7ab      	b.n	800500a <_malloc_r+0x22>
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	6862      	ldr	r2, [r4, #4]
 80050b6:	d1dd      	bne.n	8005074 <_malloc_r+0x8c>
 80050b8:	f8c8 2000 	str.w	r2, [r8]
 80050bc:	e7ec      	b.n	8005098 <_malloc_r+0xb0>
 80050be:	4623      	mov	r3, r4
 80050c0:	6864      	ldr	r4, [r4, #4]
 80050c2:	e7ac      	b.n	800501e <_malloc_r+0x36>
 80050c4:	4634      	mov	r4, r6
 80050c6:	6876      	ldr	r6, [r6, #4]
 80050c8:	e7b4      	b.n	8005034 <_malloc_r+0x4c>
 80050ca:	4613      	mov	r3, r2
 80050cc:	e7cc      	b.n	8005068 <_malloc_r+0x80>
 80050ce:	230c      	movs	r3, #12
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4638      	mov	r0, r7
 80050d4:	f000 f80e 	bl	80050f4 <__malloc_unlock>
 80050d8:	e797      	b.n	800500a <_malloc_r+0x22>
 80050da:	6025      	str	r5, [r4, #0]
 80050dc:	e7dc      	b.n	8005098 <_malloc_r+0xb0>
 80050de:	605b      	str	r3, [r3, #4]
 80050e0:	deff      	udf	#255	; 0xff
 80050e2:	bf00      	nop
 80050e4:	20000728 	.word	0x20000728

080050e8 <__malloc_lock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__malloc_lock+0x8>)
 80050ea:	f7ff bf01 	b.w	8004ef0 <__retarget_lock_acquire_recursive>
 80050ee:	bf00      	nop
 80050f0:	20000724 	.word	0x20000724

080050f4 <__malloc_unlock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__malloc_unlock+0x8>)
 80050f6:	f7ff befc 	b.w	8004ef2 <__retarget_lock_release_recursive>
 80050fa:	bf00      	nop
 80050fc:	20000724 	.word	0x20000724

08005100 <__ssputs_r>:
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	688e      	ldr	r6, [r1, #8]
 8005106:	461f      	mov	r7, r3
 8005108:	42be      	cmp	r6, r7
 800510a:	680b      	ldr	r3, [r1, #0]
 800510c:	4682      	mov	sl, r0
 800510e:	460c      	mov	r4, r1
 8005110:	4690      	mov	r8, r2
 8005112:	d82c      	bhi.n	800516e <__ssputs_r+0x6e>
 8005114:	898a      	ldrh	r2, [r1, #12]
 8005116:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800511a:	d026      	beq.n	800516a <__ssputs_r+0x6a>
 800511c:	6965      	ldr	r5, [r4, #20]
 800511e:	6909      	ldr	r1, [r1, #16]
 8005120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005124:	eba3 0901 	sub.w	r9, r3, r1
 8005128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800512c:	1c7b      	adds	r3, r7, #1
 800512e:	444b      	add	r3, r9
 8005130:	106d      	asrs	r5, r5, #1
 8005132:	429d      	cmp	r5, r3
 8005134:	bf38      	it	cc
 8005136:	461d      	movcc	r5, r3
 8005138:	0553      	lsls	r3, r2, #21
 800513a:	d527      	bpl.n	800518c <__ssputs_r+0x8c>
 800513c:	4629      	mov	r1, r5
 800513e:	f7ff ff53 	bl	8004fe8 <_malloc_r>
 8005142:	4606      	mov	r6, r0
 8005144:	b360      	cbz	r0, 80051a0 <__ssputs_r+0xa0>
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	464a      	mov	r2, r9
 800514a:	f7ff fed3 	bl	8004ef4 <memcpy>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	6126      	str	r6, [r4, #16]
 800515c:	6165      	str	r5, [r4, #20]
 800515e:	444e      	add	r6, r9
 8005160:	eba5 0509 	sub.w	r5, r5, r9
 8005164:	6026      	str	r6, [r4, #0]
 8005166:	60a5      	str	r5, [r4, #8]
 8005168:	463e      	mov	r6, r7
 800516a:	42be      	cmp	r6, r7
 800516c:	d900      	bls.n	8005170 <__ssputs_r+0x70>
 800516e:	463e      	mov	r6, r7
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	4632      	mov	r2, r6
 8005174:	4641      	mov	r1, r8
 8005176:	f7ff fe6f 	bl	8004e58 <memmove>
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	4433      	add	r3, r6
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	2000      	movs	r0, #0
 8005188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518c:	462a      	mov	r2, r5
 800518e:	f000 faaf 	bl	80056f0 <_realloc_r>
 8005192:	4606      	mov	r6, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d1e0      	bne.n	800515a <__ssputs_r+0x5a>
 8005198:	6921      	ldr	r1, [r4, #16]
 800519a:	4650      	mov	r0, sl
 800519c:	f7ff feb8 	bl	8004f10 <_free_r>
 80051a0:	230c      	movs	r3, #12
 80051a2:	f8ca 3000 	str.w	r3, [sl]
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	e7e9      	b.n	8005188 <__ssputs_r+0x88>

080051b4 <_svfiprintf_r>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	4698      	mov	r8, r3
 80051ba:	898b      	ldrh	r3, [r1, #12]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	b09d      	sub	sp, #116	; 0x74
 80051c0:	4607      	mov	r7, r0
 80051c2:	460d      	mov	r5, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	d50e      	bpl.n	80051e6 <_svfiprintf_r+0x32>
 80051c8:	690b      	ldr	r3, [r1, #16]
 80051ca:	b963      	cbnz	r3, 80051e6 <_svfiprintf_r+0x32>
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	f7ff ff0b 	bl	8004fe8 <_malloc_r>
 80051d2:	6028      	str	r0, [r5, #0]
 80051d4:	6128      	str	r0, [r5, #16]
 80051d6:	b920      	cbnz	r0, 80051e2 <_svfiprintf_r+0x2e>
 80051d8:	230c      	movs	r3, #12
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	e0d0      	b.n	8005384 <_svfiprintf_r+0x1d0>
 80051e2:	2340      	movs	r3, #64	; 0x40
 80051e4:	616b      	str	r3, [r5, #20]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ea:	2320      	movs	r3, #32
 80051ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f4:	2330      	movs	r3, #48	; 0x30
 80051f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800539c <_svfiprintf_r+0x1e8>
 80051fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051fe:	f04f 0901 	mov.w	r9, #1
 8005202:	4623      	mov	r3, r4
 8005204:	469a      	mov	sl, r3
 8005206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520a:	b10a      	cbz	r2, 8005210 <_svfiprintf_r+0x5c>
 800520c:	2a25      	cmp	r2, #37	; 0x25
 800520e:	d1f9      	bne.n	8005204 <_svfiprintf_r+0x50>
 8005210:	ebba 0b04 	subs.w	fp, sl, r4
 8005214:	d00b      	beq.n	800522e <_svfiprintf_r+0x7a>
 8005216:	465b      	mov	r3, fp
 8005218:	4622      	mov	r2, r4
 800521a:	4629      	mov	r1, r5
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff ff6f 	bl	8005100 <__ssputs_r>
 8005222:	3001      	adds	r0, #1
 8005224:	f000 80a9 	beq.w	800537a <_svfiprintf_r+0x1c6>
 8005228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800522a:	445a      	add	r2, fp
 800522c:	9209      	str	r2, [sp, #36]	; 0x24
 800522e:	f89a 3000 	ldrb.w	r3, [sl]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a1 	beq.w	800537a <_svfiprintf_r+0x1c6>
 8005238:	2300      	movs	r3, #0
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005242:	f10a 0a01 	add.w	sl, sl, #1
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	9307      	str	r3, [sp, #28]
 800524a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800524e:	931a      	str	r3, [sp, #104]	; 0x68
 8005250:	4654      	mov	r4, sl
 8005252:	2205      	movs	r2, #5
 8005254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005258:	4850      	ldr	r0, [pc, #320]	; (800539c <_svfiprintf_r+0x1e8>)
 800525a:	f7fa ffb9 	bl	80001d0 <memchr>
 800525e:	9a04      	ldr	r2, [sp, #16]
 8005260:	b9d8      	cbnz	r0, 800529a <_svfiprintf_r+0xe6>
 8005262:	06d0      	lsls	r0, r2, #27
 8005264:	bf44      	itt	mi
 8005266:	2320      	movmi	r3, #32
 8005268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526c:	0711      	lsls	r1, r2, #28
 800526e:	bf44      	itt	mi
 8005270:	232b      	movmi	r3, #43	; 0x2b
 8005272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005276:	f89a 3000 	ldrb.w	r3, [sl]
 800527a:	2b2a      	cmp	r3, #42	; 0x2a
 800527c:	d015      	beq.n	80052aa <_svfiprintf_r+0xf6>
 800527e:	9a07      	ldr	r2, [sp, #28]
 8005280:	4654      	mov	r4, sl
 8005282:	2000      	movs	r0, #0
 8005284:	f04f 0c0a 	mov.w	ip, #10
 8005288:	4621      	mov	r1, r4
 800528a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528e:	3b30      	subs	r3, #48	; 0x30
 8005290:	2b09      	cmp	r3, #9
 8005292:	d94d      	bls.n	8005330 <_svfiprintf_r+0x17c>
 8005294:	b1b0      	cbz	r0, 80052c4 <_svfiprintf_r+0x110>
 8005296:	9207      	str	r2, [sp, #28]
 8005298:	e014      	b.n	80052c4 <_svfiprintf_r+0x110>
 800529a:	eba0 0308 	sub.w	r3, r0, r8
 800529e:	fa09 f303 	lsl.w	r3, r9, r3
 80052a2:	4313      	orrs	r3, r2
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	46a2      	mov	sl, r4
 80052a8:	e7d2      	b.n	8005250 <_svfiprintf_r+0x9c>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	9103      	str	r1, [sp, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfbb      	ittet	lt
 80052b6:	425b      	neglt	r3, r3
 80052b8:	f042 0202 	orrlt.w	r2, r2, #2
 80052bc:	9307      	strge	r3, [sp, #28]
 80052be:	9307      	strlt	r3, [sp, #28]
 80052c0:	bfb8      	it	lt
 80052c2:	9204      	strlt	r2, [sp, #16]
 80052c4:	7823      	ldrb	r3, [r4, #0]
 80052c6:	2b2e      	cmp	r3, #46	; 0x2e
 80052c8:	d10c      	bne.n	80052e4 <_svfiprintf_r+0x130>
 80052ca:	7863      	ldrb	r3, [r4, #1]
 80052cc:	2b2a      	cmp	r3, #42	; 0x2a
 80052ce:	d134      	bne.n	800533a <_svfiprintf_r+0x186>
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	1d1a      	adds	r2, r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	9203      	str	r2, [sp, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfb8      	it	lt
 80052dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80052e0:	3402      	adds	r4, #2
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80053ac <_svfiprintf_r+0x1f8>
 80052e8:	7821      	ldrb	r1, [r4, #0]
 80052ea:	2203      	movs	r2, #3
 80052ec:	4650      	mov	r0, sl
 80052ee:	f7fa ff6f 	bl	80001d0 <memchr>
 80052f2:	b138      	cbz	r0, 8005304 <_svfiprintf_r+0x150>
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	eba0 000a 	sub.w	r0, r0, sl
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	4082      	lsls	r2, r0
 80052fe:	4313      	orrs	r3, r2
 8005300:	3401      	adds	r4, #1
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005308:	4825      	ldr	r0, [pc, #148]	; (80053a0 <_svfiprintf_r+0x1ec>)
 800530a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530e:	2206      	movs	r2, #6
 8005310:	f7fa ff5e 	bl	80001d0 <memchr>
 8005314:	2800      	cmp	r0, #0
 8005316:	d038      	beq.n	800538a <_svfiprintf_r+0x1d6>
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <_svfiprintf_r+0x1f0>)
 800531a:	bb1b      	cbnz	r3, 8005364 <_svfiprintf_r+0x1b0>
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	3307      	adds	r3, #7
 8005320:	f023 0307 	bic.w	r3, r3, #7
 8005324:	3308      	adds	r3, #8
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532a:	4433      	add	r3, r6
 800532c:	9309      	str	r3, [sp, #36]	; 0x24
 800532e:	e768      	b.n	8005202 <_svfiprintf_r+0x4e>
 8005330:	fb0c 3202 	mla	r2, ip, r2, r3
 8005334:	460c      	mov	r4, r1
 8005336:	2001      	movs	r0, #1
 8005338:	e7a6      	b.n	8005288 <_svfiprintf_r+0xd4>
 800533a:	2300      	movs	r3, #0
 800533c:	3401      	adds	r4, #1
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	4619      	mov	r1, r3
 8005342:	f04f 0c0a 	mov.w	ip, #10
 8005346:	4620      	mov	r0, r4
 8005348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534c:	3a30      	subs	r2, #48	; 0x30
 800534e:	2a09      	cmp	r2, #9
 8005350:	d903      	bls.n	800535a <_svfiprintf_r+0x1a6>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0c6      	beq.n	80052e4 <_svfiprintf_r+0x130>
 8005356:	9105      	str	r1, [sp, #20]
 8005358:	e7c4      	b.n	80052e4 <_svfiprintf_r+0x130>
 800535a:	fb0c 2101 	mla	r1, ip, r1, r2
 800535e:	4604      	mov	r4, r0
 8005360:	2301      	movs	r3, #1
 8005362:	e7f0      	b.n	8005346 <_svfiprintf_r+0x192>
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <_svfiprintf_r+0x1f4>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	4638      	mov	r0, r7
 8005370:	f3af 8000 	nop.w
 8005374:	1c42      	adds	r2, r0, #1
 8005376:	4606      	mov	r6, r0
 8005378:	d1d6      	bne.n	8005328 <_svfiprintf_r+0x174>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	f53f af2d 	bmi.w	80051dc <_svfiprintf_r+0x28>
 8005382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005384:	b01d      	add	sp, #116	; 0x74
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	ab03      	add	r3, sp, #12
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	462a      	mov	r2, r5
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <_svfiprintf_r+0x1f4>)
 8005392:	a904      	add	r1, sp, #16
 8005394:	4638      	mov	r0, r7
 8005396:	f000 f879 	bl	800548c <_printf_i>
 800539a:	e7eb      	b.n	8005374 <_svfiprintf_r+0x1c0>
 800539c:	08006568 	.word	0x08006568
 80053a0:	08006572 	.word	0x08006572
 80053a4:	00000000 	.word	0x00000000
 80053a8:	08005101 	.word	0x08005101
 80053ac:	0800656e 	.word	0x0800656e

080053b0 <_printf_common>:
 80053b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	4616      	mov	r6, r2
 80053b6:	4699      	mov	r9, r3
 80053b8:	688a      	ldr	r2, [r1, #8]
 80053ba:	690b      	ldr	r3, [r1, #16]
 80053bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c0:	4293      	cmp	r3, r2
 80053c2:	bfb8      	it	lt
 80053c4:	4613      	movlt	r3, r2
 80053c6:	6033      	str	r3, [r6, #0]
 80053c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053cc:	4607      	mov	r7, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	b10a      	cbz	r2, 80053d6 <_printf_common+0x26>
 80053d2:	3301      	adds	r3, #1
 80053d4:	6033      	str	r3, [r6, #0]
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	0699      	lsls	r1, r3, #26
 80053da:	bf42      	ittt	mi
 80053dc:	6833      	ldrmi	r3, [r6, #0]
 80053de:	3302      	addmi	r3, #2
 80053e0:	6033      	strmi	r3, [r6, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	f015 0506 	ands.w	r5, r5, #6
 80053e8:	d106      	bne.n	80053f8 <_printf_common+0x48>
 80053ea:	f104 0a19 	add.w	sl, r4, #25
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	6832      	ldr	r2, [r6, #0]
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dc26      	bgt.n	8005446 <_printf_common+0x96>
 80053f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053fc:	1e13      	subs	r3, r2, #0
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	bf18      	it	ne
 8005402:	2301      	movne	r3, #1
 8005404:	0692      	lsls	r2, r2, #26
 8005406:	d42b      	bmi.n	8005460 <_printf_common+0xb0>
 8005408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800540c:	4649      	mov	r1, r9
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	3001      	adds	r0, #1
 8005414:	d01e      	beq.n	8005454 <_printf_common+0xa4>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	2b04      	cmp	r3, #4
 8005420:	bf02      	ittt	eq
 8005422:	68e5      	ldreq	r5, [r4, #12]
 8005424:	6833      	ldreq	r3, [r6, #0]
 8005426:	1aed      	subeq	r5, r5, r3
 8005428:	68a3      	ldr	r3, [r4, #8]
 800542a:	bf0c      	ite	eq
 800542c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005430:	2500      	movne	r5, #0
 8005432:	4293      	cmp	r3, r2
 8005434:	bfc4      	itt	gt
 8005436:	1a9b      	subgt	r3, r3, r2
 8005438:	18ed      	addgt	r5, r5, r3
 800543a:	2600      	movs	r6, #0
 800543c:	341a      	adds	r4, #26
 800543e:	42b5      	cmp	r5, r6
 8005440:	d11a      	bne.n	8005478 <_printf_common+0xc8>
 8005442:	2000      	movs	r0, #0
 8005444:	e008      	b.n	8005458 <_printf_common+0xa8>
 8005446:	2301      	movs	r3, #1
 8005448:	4652      	mov	r2, sl
 800544a:	4649      	mov	r1, r9
 800544c:	4638      	mov	r0, r7
 800544e:	47c0      	blx	r8
 8005450:	3001      	adds	r0, #1
 8005452:	d103      	bne.n	800545c <_printf_common+0xac>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	3501      	adds	r5, #1
 800545e:	e7c6      	b.n	80053ee <_printf_common+0x3e>
 8005460:	18e1      	adds	r1, r4, r3
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	2030      	movs	r0, #48	; 0x30
 8005466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800546a:	4422      	add	r2, r4
 800546c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005474:	3302      	adds	r3, #2
 8005476:	e7c7      	b.n	8005408 <_printf_common+0x58>
 8005478:	2301      	movs	r3, #1
 800547a:	4622      	mov	r2, r4
 800547c:	4649      	mov	r1, r9
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d0e6      	beq.n	8005454 <_printf_common+0xa4>
 8005486:	3601      	adds	r6, #1
 8005488:	e7d9      	b.n	800543e <_printf_common+0x8e>
	...

0800548c <_printf_i>:
 800548c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	7e0f      	ldrb	r7, [r1, #24]
 8005492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005494:	2f78      	cmp	r7, #120	; 0x78
 8005496:	4691      	mov	r9, r2
 8005498:	4680      	mov	r8, r0
 800549a:	460c      	mov	r4, r1
 800549c:	469a      	mov	sl, r3
 800549e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054a2:	d807      	bhi.n	80054b4 <_printf_i+0x28>
 80054a4:	2f62      	cmp	r7, #98	; 0x62
 80054a6:	d80a      	bhi.n	80054be <_printf_i+0x32>
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	f000 80d4 	beq.w	8005656 <_printf_i+0x1ca>
 80054ae:	2f58      	cmp	r7, #88	; 0x58
 80054b0:	f000 80c0 	beq.w	8005634 <_printf_i+0x1a8>
 80054b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054bc:	e03a      	b.n	8005534 <_printf_i+0xa8>
 80054be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054c2:	2b15      	cmp	r3, #21
 80054c4:	d8f6      	bhi.n	80054b4 <_printf_i+0x28>
 80054c6:	a101      	add	r1, pc, #4	; (adr r1, 80054cc <_printf_i+0x40>)
 80054c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005539 	.word	0x08005539
 80054d4:	080054b5 	.word	0x080054b5
 80054d8:	080054b5 	.word	0x080054b5
 80054dc:	080054b5 	.word	0x080054b5
 80054e0:	080054b5 	.word	0x080054b5
 80054e4:	08005539 	.word	0x08005539
 80054e8:	080054b5 	.word	0x080054b5
 80054ec:	080054b5 	.word	0x080054b5
 80054f0:	080054b5 	.word	0x080054b5
 80054f4:	080054b5 	.word	0x080054b5
 80054f8:	0800563d 	.word	0x0800563d
 80054fc:	08005565 	.word	0x08005565
 8005500:	080055f7 	.word	0x080055f7
 8005504:	080054b5 	.word	0x080054b5
 8005508:	080054b5 	.word	0x080054b5
 800550c:	0800565f 	.word	0x0800565f
 8005510:	080054b5 	.word	0x080054b5
 8005514:	08005565 	.word	0x08005565
 8005518:	080054b5 	.word	0x080054b5
 800551c:	080054b5 	.word	0x080054b5
 8005520:	080055ff 	.word	0x080055ff
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	1d1a      	adds	r2, r3, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005534:	2301      	movs	r3, #1
 8005536:	e09f      	b.n	8005678 <_printf_i+0x1ec>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	682b      	ldr	r3, [r5, #0]
 800553c:	0607      	lsls	r7, r0, #24
 800553e:	f103 0104 	add.w	r1, r3, #4
 8005542:	6029      	str	r1, [r5, #0]
 8005544:	d501      	bpl.n	800554a <_printf_i+0xbe>
 8005546:	681e      	ldr	r6, [r3, #0]
 8005548:	e003      	b.n	8005552 <_printf_i+0xc6>
 800554a:	0646      	lsls	r6, r0, #25
 800554c:	d5fb      	bpl.n	8005546 <_printf_i+0xba>
 800554e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005552:	2e00      	cmp	r6, #0
 8005554:	da03      	bge.n	800555e <_printf_i+0xd2>
 8005556:	232d      	movs	r3, #45	; 0x2d
 8005558:	4276      	negs	r6, r6
 800555a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555e:	485a      	ldr	r0, [pc, #360]	; (80056c8 <_printf_i+0x23c>)
 8005560:	230a      	movs	r3, #10
 8005562:	e012      	b.n	800558a <_printf_i+0xfe>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	1d19      	adds	r1, r3, #4
 800556a:	6029      	str	r1, [r5, #0]
 800556c:	0605      	lsls	r5, r0, #24
 800556e:	d501      	bpl.n	8005574 <_printf_i+0xe8>
 8005570:	681e      	ldr	r6, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0xee>
 8005574:	0641      	lsls	r1, r0, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0xe4>
 8005578:	881e      	ldrh	r6, [r3, #0]
 800557a:	4853      	ldr	r0, [pc, #332]	; (80056c8 <_printf_i+0x23c>)
 800557c:	2f6f      	cmp	r7, #111	; 0x6f
 800557e:	bf0c      	ite	eq
 8005580:	2308      	moveq	r3, #8
 8005582:	230a      	movne	r3, #10
 8005584:	2100      	movs	r1, #0
 8005586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800558a:	6865      	ldr	r5, [r4, #4]
 800558c:	60a5      	str	r5, [r4, #8]
 800558e:	2d00      	cmp	r5, #0
 8005590:	bfa2      	ittt	ge
 8005592:	6821      	ldrge	r1, [r4, #0]
 8005594:	f021 0104 	bicge.w	r1, r1, #4
 8005598:	6021      	strge	r1, [r4, #0]
 800559a:	b90e      	cbnz	r6, 80055a0 <_printf_i+0x114>
 800559c:	2d00      	cmp	r5, #0
 800559e:	d04b      	beq.n	8005638 <_printf_i+0x1ac>
 80055a0:	4615      	mov	r5, r2
 80055a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a6:	fb03 6711 	mls	r7, r3, r1, r6
 80055aa:	5dc7      	ldrb	r7, [r0, r7]
 80055ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b0:	4637      	mov	r7, r6
 80055b2:	42bb      	cmp	r3, r7
 80055b4:	460e      	mov	r6, r1
 80055b6:	d9f4      	bls.n	80055a2 <_printf_i+0x116>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d10b      	bne.n	80055d4 <_printf_i+0x148>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	07de      	lsls	r6, r3, #31
 80055c0:	d508      	bpl.n	80055d4 <_printf_i+0x148>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	4299      	cmp	r1, r3
 80055c8:	bfde      	ittt	le
 80055ca:	2330      	movle	r3, #48	; 0x30
 80055cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d4:	1b52      	subs	r2, r2, r5
 80055d6:	6122      	str	r2, [r4, #16]
 80055d8:	f8cd a000 	str.w	sl, [sp]
 80055dc:	464b      	mov	r3, r9
 80055de:	aa03      	add	r2, sp, #12
 80055e0:	4621      	mov	r1, r4
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fee4 	bl	80053b0 <_printf_common>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d14a      	bne.n	8005682 <_printf_i+0x1f6>
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	b004      	add	sp, #16
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f043 0320 	orr.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	4833      	ldr	r0, [pc, #204]	; (80056cc <_printf_i+0x240>)
 8005600:	2778      	movs	r7, #120	; 0x78
 8005602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6829      	ldr	r1, [r5, #0]
 800560a:	061f      	lsls	r7, r3, #24
 800560c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005610:	d402      	bmi.n	8005618 <_printf_i+0x18c>
 8005612:	065f      	lsls	r7, r3, #25
 8005614:	bf48      	it	mi
 8005616:	b2b6      	uxthmi	r6, r6
 8005618:	07df      	lsls	r7, r3, #31
 800561a:	bf48      	it	mi
 800561c:	f043 0320 	orrmi.w	r3, r3, #32
 8005620:	6029      	str	r1, [r5, #0]
 8005622:	bf48      	it	mi
 8005624:	6023      	strmi	r3, [r4, #0]
 8005626:	b91e      	cbnz	r6, 8005630 <_printf_i+0x1a4>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f023 0320 	bic.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	2310      	movs	r3, #16
 8005632:	e7a7      	b.n	8005584 <_printf_i+0xf8>
 8005634:	4824      	ldr	r0, [pc, #144]	; (80056c8 <_printf_i+0x23c>)
 8005636:	e7e4      	b.n	8005602 <_printf_i+0x176>
 8005638:	4615      	mov	r5, r2
 800563a:	e7bd      	b.n	80055b8 <_printf_i+0x12c>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	6826      	ldr	r6, [r4, #0]
 8005640:	6961      	ldr	r1, [r4, #20]
 8005642:	1d18      	adds	r0, r3, #4
 8005644:	6028      	str	r0, [r5, #0]
 8005646:	0635      	lsls	r5, r6, #24
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	d501      	bpl.n	8005650 <_printf_i+0x1c4>
 800564c:	6019      	str	r1, [r3, #0]
 800564e:	e002      	b.n	8005656 <_printf_i+0x1ca>
 8005650:	0670      	lsls	r0, r6, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0x1c0>
 8005654:	8019      	strh	r1, [r3, #0]
 8005656:	2300      	movs	r3, #0
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	4615      	mov	r5, r2
 800565c:	e7bc      	b.n	80055d8 <_printf_i+0x14c>
 800565e:	682b      	ldr	r3, [r5, #0]
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	602a      	str	r2, [r5, #0]
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	2100      	movs	r1, #0
 800566a:	4628      	mov	r0, r5
 800566c:	f7fa fdb0 	bl	80001d0 <memchr>
 8005670:	b108      	cbz	r0, 8005676 <_printf_i+0x1ea>
 8005672:	1b40      	subs	r0, r0, r5
 8005674:	6060      	str	r0, [r4, #4]
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	2300      	movs	r3, #0
 800567c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005680:	e7aa      	b.n	80055d8 <_printf_i+0x14c>
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	462a      	mov	r2, r5
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	47d0      	blx	sl
 800568c:	3001      	adds	r0, #1
 800568e:	d0ad      	beq.n	80055ec <_printf_i+0x160>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	079b      	lsls	r3, r3, #30
 8005694:	d413      	bmi.n	80056be <_printf_i+0x232>
 8005696:	68e0      	ldr	r0, [r4, #12]
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	4298      	cmp	r0, r3
 800569c:	bfb8      	it	lt
 800569e:	4618      	movlt	r0, r3
 80056a0:	e7a6      	b.n	80055f0 <_printf_i+0x164>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4632      	mov	r2, r6
 80056a6:	4649      	mov	r1, r9
 80056a8:	4640      	mov	r0, r8
 80056aa:	47d0      	blx	sl
 80056ac:	3001      	adds	r0, #1
 80056ae:	d09d      	beq.n	80055ec <_printf_i+0x160>
 80056b0:	3501      	adds	r5, #1
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	9903      	ldr	r1, [sp, #12]
 80056b6:	1a5b      	subs	r3, r3, r1
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	dcf2      	bgt.n	80056a2 <_printf_i+0x216>
 80056bc:	e7eb      	b.n	8005696 <_printf_i+0x20a>
 80056be:	2500      	movs	r5, #0
 80056c0:	f104 0619 	add.w	r6, r4, #25
 80056c4:	e7f5      	b.n	80056b2 <_printf_i+0x226>
 80056c6:	bf00      	nop
 80056c8:	08006579 	.word	0x08006579
 80056cc:	0800658a 	.word	0x0800658a

080056d0 <_sbrk_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	; (80056ec <_sbrk_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fc f94e 	bl	800197c <_sbrk>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_sbrk_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_sbrk_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	20000720 	.word	0x20000720

080056f0 <_realloc_r>:
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f4:	4680      	mov	r8, r0
 80056f6:	4614      	mov	r4, r2
 80056f8:	460e      	mov	r6, r1
 80056fa:	b921      	cbnz	r1, 8005706 <_realloc_r+0x16>
 80056fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005700:	4611      	mov	r1, r2
 8005702:	f7ff bc71 	b.w	8004fe8 <_malloc_r>
 8005706:	b92a      	cbnz	r2, 8005714 <_realloc_r+0x24>
 8005708:	f7ff fc02 	bl	8004f10 <_free_r>
 800570c:	4625      	mov	r5, r4
 800570e:	4628      	mov	r0, r5
 8005710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005714:	f000 f81b 	bl	800574e <_malloc_usable_size_r>
 8005718:	4284      	cmp	r4, r0
 800571a:	4607      	mov	r7, r0
 800571c:	d802      	bhi.n	8005724 <_realloc_r+0x34>
 800571e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005722:	d812      	bhi.n	800574a <_realloc_r+0x5a>
 8005724:	4621      	mov	r1, r4
 8005726:	4640      	mov	r0, r8
 8005728:	f7ff fc5e 	bl	8004fe8 <_malloc_r>
 800572c:	4605      	mov	r5, r0
 800572e:	2800      	cmp	r0, #0
 8005730:	d0ed      	beq.n	800570e <_realloc_r+0x1e>
 8005732:	42bc      	cmp	r4, r7
 8005734:	4622      	mov	r2, r4
 8005736:	4631      	mov	r1, r6
 8005738:	bf28      	it	cs
 800573a:	463a      	movcs	r2, r7
 800573c:	f7ff fbda 	bl	8004ef4 <memcpy>
 8005740:	4631      	mov	r1, r6
 8005742:	4640      	mov	r0, r8
 8005744:	f7ff fbe4 	bl	8004f10 <_free_r>
 8005748:	e7e1      	b.n	800570e <_realloc_r+0x1e>
 800574a:	4635      	mov	r5, r6
 800574c:	e7df      	b.n	800570e <_realloc_r+0x1e>

0800574e <_malloc_usable_size_r>:
 800574e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005752:	1f18      	subs	r0, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfbc      	itt	lt
 8005758:	580b      	ldrlt	r3, [r1, r0]
 800575a:	18c0      	addlt	r0, r0, r3
 800575c:	4770      	bx	lr
	...

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
